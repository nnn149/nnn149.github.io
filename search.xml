<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ASF挂卡软件</title>
    <url>/%E5%B7%A5%E5%85%B7/asf-notes/</url>
    <content><![CDATA[<p>Docker部署ASF挂卡</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>先新建目录<code>/home/archi/asf</code></p>
<p>上传<code>IPC.config</code>到目录</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Kestrel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Endpoints&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;HTTP&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;Url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://*:1242&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>使用 <a href="https://justarchinet.github.io/ASF-WebConfigGenerator">在线配置文件生成器</a></p>
<p>选择ASF，填入SteamID64</p>
<p>打开高级设置设置，打开Headless并设置IPCPassword</p>
<p>下载配置文件(ASF.json)上传到目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -p 1242:1242 -v /home/archi/asf:/app/config --name asf --restart=always --pull always justarchi/archisteamfarm</span><br></pre></td></tr></table></figure>

<p>最后浏览器打开 <a href="http://192.168.2.149:1242/">http://192.168.2.149:1242/</a></p>
<p>输入密码登陆后，新建一个Bot</p>
<h2 id="公网访问"><a href="#公网访问" class="headerlink" title="公网访问"></a>公网访问</h2><h3 id="frpc配置"><a href="#frpc配置" class="headerlink" title="frpc配置"></a>frpc配置</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[asf]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">1242</span></span><br><span class="line"><span class="attr">custom_domains</span> = asf.n1.nicenan.cn</span><br></pre></td></tr></table></figure>

<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    #填写绑定证书的域名</span><br><span class="line">    server_name  asf.n1.nicenan.cn; </span><br><span class="line">    #证书文件名称</span><br><span class="line">    include /etc/nginx/conf.d/n1.ssl;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">    #反向代理地址</span><br><span class="line">    proxy_pass http://asf.n1.nicenan.cn:9569;</span><br><span class="line"></span><br><span class="line">    # 反向代理buffer</span><br><span class="line">    include /etc/nginx/conf.d/fxdl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>剩余frp和nginx配置见 <a href="./frp-notes.md">Referrence: frp</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Steam</tag>
        <tag>ASF</tag>
      </tags>
  </entry>
  <entry>
    <title>Charles抓包使用</title>
    <url>/%E5%B7%A5%E5%85%B7/charles-notes/</url>
    <content><![CDATA[<p>使用Charles分析http协议</p>
<p>抓包java和.net程序</p>
<span id="more"></span>

<h2 id="安装Charles"><a href="#安装Charles" class="headerlink" title="安装Charles"></a>安装Charles</h2><p><a href="https://www.charlesproxy.com/">官网</a></p>
<h2 id="配置Charles"><a href="#配置Charles" class="headerlink" title="配置Charles"></a>配置Charles</h2><h3 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h3><p>菜单: Proxy -&gt; SSL Proxying Settings -&gt; SSL Proxying选项卡 -&gt; Enable SSL Proxying  勾选<br>底下Include添加需要拦截的域名</p>
<p>菜单: Proxy -&gt;<br>Windows Proxy 勾选<br>Start SSL Proxying<br>Start Recording</p>
<h3 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h3><p><a href="https://zhile.io/2017/07/07/charles-proxy-usage-and-license.html">Charles Proxy使用笔记（文内有好礼</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Registered Name:    https://zhile.io</span><br><span class="line">License Key:        48891cf209c6d32bf4</span><br></pre></td></tr></table></figure>

<h2 id="抓包C-程序"><a href="#抓包C-程序" class="headerlink" title="抓包C#程序"></a>抓包C#程序</h2><h3 id="解决SSL报错"><a href="#解决SSL报错" class="headerlink" title="解决SSL报错"></a>解决SSL报错</h3><p>添加代码<br><code>ServicePointManager.ServerCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) =&gt; true;</code></p>
<h2 id="抓包Java程序"><a href="#抓包Java程序" class="headerlink" title="抓包Java程序"></a>抓包Java程序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;https.proxyHost&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">System.setProperty(<span class="string">&quot;https.proxyPort&quot;</span>, <span class="string">&quot;8888&quot;</span>);</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Charles</tag>
      </tags>
  </entry>
  <entry>
    <title>C#控制扫雷播放 BadApple</title>
    <url>/NET/csharp-bad-apple/</url>
    <content><![CDATA[<p>BadApple已经被播放在各种地方，用扫雷实现一次。</p>
<img src="/NET/csharp-bad-apple/saolei2-1-6424671847.gif" class="" title="img">

<span id="more"></span>

<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>首先我们知道视频是一帧一帧的播放的，我们就需要先把badapple视频提取成一帧一帧的图片。方法有很多，我推荐用<code>ffmepg</code>来实现。下载构建好的windows版本的<a href="https://ffmpeg.zeranoe.com/builds/">ffmepg</a>。下载完成后有三个exe文件。我们只需要用到ffmepg.exe这个。然后再下载badapple的视频(链接: <a href="https://pan.baidu.com/s/1qXXo0C8">https://pan.baidu.com/s/1qXXo0C8</a> 密码: buvr)。都准备好后，把ffmepg.exe和badapple.mkv这两个文件放到同一个文件夹中。</p>
<p>我们把扫雷的格子弄到最大，大小是24<em>30。所以我们等等生成的图片的分辨率也应该为24</em>30。每个像素点对应扫雷上面的一个旗子。</p>
<img src="/NET/csharp-bad-apple/saolei-6424665902.jpg" class="" title="img">

<p>在文件夹空白处按住Shitf键再按鼠标右键选择打开命令行或者powershell。<br>然后输入<code>ffmpeg -i badapple.mkv -s 30X24 b%d.jpg</code>回车</p>
<img src="/NET/csharp-bad-apple/ffmepg-6424677657.jpg" class="" title="img">

<hr>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>我们知道badapple是黑白的视频，但是它并不是有纯黑色or白色构成的。我们就要取出每一张图片的每一个像素的rgb值，然后计算出灰度值。应为扫雷只有有旗子和无旗子两种状态。所以我们要将灰度值平均分两份。超过中间值就插旗子。这样就可以实现图片的效果。我们打开vs2017新建一个控制台应用程序。引用<code>System.Darwing</code>。首先我们先定义一个计算灰度值并返回插旗子或者不插旗子的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> bool <span class="title function_">IsFlag</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> g, <span class="type">int</span> b)</span><span class="comment">//一个像素点的RGB数据</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">gray</span> <span class="operator">=</span> (r + g + b) / <span class="number">3</span>;<span class="comment">//计算灰度值</span></span><br><span class="line">            <span class="keyword">if</span> (gray &gt; <span class="number">127</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>接着我们按顺序循环读取文件夹里面的每一张图片，并且计算出每张图片的灰度判断是否要插旗子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Main</span><span class="params">(string[] args)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">string</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\badapple\\b&quot;</span>;<span class="comment">//文件夹的路径</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//第几张图片</span></span><br><span class="line">    <span class="keyword">while</span> (count &lt; <span class="number">6751</span>)<span class="comment">//总共6750张图片，我们就循环6750次</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bitmap</span>(path + count + <span class="string">&quot;.jpg&quot;</span>);<span class="comment">//读入第count张图片</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>; y &lt; <span class="number">24</span>; y++)<span class="comment">//循环判断每个像素点是否要插旗子</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">30</span>; x++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> bitmap.GetPixel(x, y);</span><br><span class="line">                <span class="keyword">if</span> (IsFlag(color.R, color.G, color.B))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//有旗子</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//无旗子</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着，我们要定义一个数组，来记录整个扫雷是否有插旗子。创建一个24*30的二维数组来记录。true代表有旗子，false代表无旗子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stati bool[,] flaginfo = <span class="keyword">new</span> <span class="title class_">bool</span>[<span class="number">24</span>,<span class="number">30</span>];</span><br></pre></td></tr></table></figure>

<p>我们再定义一个鼠标右键点击的方法(使用<code>windwosAPI</code>):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[System.Runtime.InteropServices.DllImport(<span class="string">&quot;user32&quot;</span>)]</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> extern <span class="type">int</span> <span class="title function_">mouse_event</span><span class="params">(<span class="type">int</span> dwFlags, <span class="type">int</span> dx, <span class="type">int</span> dy, <span class="type">int</span> cButtons, <span class="type">int</span> dwExtraInfo)</span>;</span><br><span class="line">     <span class="comment">//移动鼠标 </span></span><br><span class="line">     const <span class="type">int</span> <span class="variable">MOUSEEVENTF_MOVE</span> <span class="operator">=</span> <span class="number">0x0001</span>;</span><br><span class="line">     <span class="comment">//模拟鼠标右键按下 </span></span><br><span class="line">     const <span class="type">int</span> <span class="variable">MOUSEEVENTF_RIGHTDOWN</span> <span class="operator">=</span> <span class="number">0x0008</span>;</span><br><span class="line">     <span class="comment">//模拟鼠标右键抬起 </span></span><br><span class="line">     const <span class="type">int</span> <span class="variable">MOUSEEVENTF_RIGHTUP</span> <span class="operator">=</span> <span class="number">0x0010</span>;</span><br><span class="line">     <span class="comment">//标示是否采用绝对坐标 </span></span><br><span class="line">     const <span class="type">int</span> <span class="variable">MOUSEEVENTF_ABSOLUTE</span> <span class="operator">=</span> <span class="number">0x8000</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">MouseRightDown</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> count)</span><span class="comment">//要点击的坐标和次数</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE | MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, x * <span class="number">65536</span> / <span class="number">1920</span>, y * <span class="number">65536</span> / <span class="number">1080</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<p>我们还要获取扫雷窗口的位置(窗口左上角的坐标),等会调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> struct RECT <span class="comment">//定义一个结构接收坐标</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> uint left;</span><br><span class="line">    <span class="keyword">public</span> uint top;</span><br><span class="line">    <span class="keyword">public</span> uint Right;</span><br><span class="line">    <span class="keyword">public</span> uint Bottom;</span><br><span class="line">&#125;</span><br><span class="line">[DllImport(<span class="string">&quot;User32.dll &quot;</span>)]</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> extern <span class="type">int</span> <span class="title function_">FindWindow</span><span class="params">(string lpClassName, string lpWindowName)</span>;<span class="comment">//寻找</span></span><br><span class="line"></span><br><span class="line">[DllImport(<span class="string">&quot;user32.dll&quot;</span>)]</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> extern <span class="type">int</span> <span class="title function_">GetWindowRect</span><span class="params">(IntPtr hwnd, out RECT lpRect)</span>;</span><br></pre></td></tr></table></figure>
<p>在main方法中加入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">string</span> <span class="variable">fullPath</span> <span class="operator">=</span> <span class="string">&quot;扫雷&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">WINDOW_HANDLER</span> <span class="operator">=</span> FindWindow(<span class="literal">null</span>, fullPath);</span><br><span class="line"><span class="type">RECT</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RECT</span>();</span><br><span class="line">GetWindowRect((IntPtr)WINDOW_HANDLER, out r);</span><br><span class="line"><span class="type">Point</span> <span class="variable">spoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>((<span class="type">int</span>)r.left + <span class="number">22</span>, (<span class="type">int</span>)r.top + <span class="number">110</span>); <span class="comment">//扫雷第一个方块的坐标</span></span><br><span class="line">MouseRightDown((<span class="type">int</span>)spoint.X, (<span class="type">int</span>)spoint.Y, <span class="number">1</span>);<span class="comment">//切换到扫雷窗口</span></span><br></pre></td></tr></table></figure>
<p>然后我们就可以更新界面了:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Upflaginfo</span>(<span class="params"><span class="built_in">int</span> x,<span class="built_in">int</span> y,<span class="built_in">bool</span> info</span>)<span class="comment">//更新界面</span></span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (flaginfo[x, y] == <span class="literal">false</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span> (info == <span class="literal">true</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   MouseRightDown((<span class="built_in">int</span>)spoint.X + x + x * <span class="number">15</span>, (<span class="built_in">int</span>)spoint.Y + y + y * <span class="number">15</span>, <span class="number">1</span>);<span class="comment">//插旗子</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span> (info == <span class="literal">false</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   MouseRightDown((<span class="built_in">int</span>)spoint.X  + x + x * <span class="number">15</span>, (<span class="built_in">int</span>)spoint.Y  + y + y * <span class="number">15</span>, <span class="number">2</span>);<span class="comment">//取消旗子</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           flaginfo[x, y] = info;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>把这个方法在有无旗帜的地方调用就可以。</p>
<p>现在我们已经可以实现动画在扫雷上面播放了，但是还有一个问题，动画播放的速度不是固定的，如果配上背景音乐的化肯定会不同步。我们从一开始就计时，通过30帧的帧率，就可以算出来当前需要显示的图片。</p>
<hr>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>所有代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using System.Drawing;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line">namespace saolei</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> bool[,] flaginfo = <span class="keyword">new</span> <span class="title class_">bool</span>[<span class="number">30</span>, <span class="number">24</span>]; <span class="comment">//创建保存旗帜信息的数组</span></span><br><span class="line">        <span class="keyword">static</span> Point spoint;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Main</span><span class="params">(string[] args)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;请打开扫雷!&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line"></span><br><span class="line">            <span class="type">string</span> <span class="variable">fullPath</span> <span class="operator">=</span> <span class="string">&quot;扫雷&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">WINDOW_HANDLER</span> <span class="operator">=</span> FindWindow(<span class="literal">null</span>, fullPath);</span><br><span class="line">            <span class="type">RECT</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RECT</span>();</span><br><span class="line">            GetWindowRect((IntPtr)WINDOW_HANDLER, out r);</span><br><span class="line">            spoint = <span class="keyword">new</span> <span class="title class_">Point</span>((<span class="type">int</span>)r.left + <span class="number">22</span>, (<span class="type">int</span>)r.top + <span class="number">110</span>); <span class="comment">//扫雷第一个方块的坐标</span></span><br><span class="line">            MouseRightDown((<span class="type">int</span>)spoint.X, (<span class="type">int</span>)spoint.Y, <span class="number">1</span>);<span class="comment">//切换到扫雷窗口</span></span><br><span class="line">            <span class="type">string</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\badapple\\b&quot;</span>;<span class="comment">//文件夹的路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//第几张图片</span></span><br><span class="line"></span><br><span class="line">            <span class="type">DateTime</span> <span class="variable">timeBegin</span> <span class="operator">=</span> DateTime.Now;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (count &lt; <span class="number">6751</span>)<span class="comment">//总共6750张图片，我们就循环6750次</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bitmap</span>(path + count + <span class="string">&quot;.jpg&quot;</span>);<span class="comment">//读入第count张图片</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>; y &lt; <span class="number">24</span>; y++)<span class="comment">//循环判断每个像素点是否要插旗子</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">30</span>; x++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> bitmap.GetPixel(x, y);</span><br><span class="line">                        <span class="keyword">if</span> (IsFlag(color.R, color.G, color.B))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//有旗子</span></span><br><span class="line">                            Upflaginfo(x, y, <span class="literal">true</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//无旗子</span></span><br><span class="line">                            Upflaginfo(x, y, <span class="literal">false</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                count = (<span class="type">int</span>)((((DateTime.Now - timeBegin).TotalSeconds) * <span class="number">30</span>) + <span class="number">1</span>);</span><br><span class="line">                Console.WriteLine(count);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> struct RECT <span class="comment">//定义一个结构接收坐标</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> uint left;</span><br><span class="line">            <span class="keyword">public</span> uint top;</span><br><span class="line">            <span class="keyword">public</span> uint Right;</span><br><span class="line">            <span class="keyword">public</span> uint Bottom;</span><br><span class="line">        &#125;</span><br><span class="line">        [DllImport(<span class="string">&quot;User32.dll &quot;</span>)]</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> extern <span class="type">int</span> <span class="title function_">FindWindow</span><span class="params">(string lpClassName, string lpWindowName)</span>;<span class="comment">//寻找</span></span><br><span class="line"></span><br><span class="line">        [DllImport(<span class="string">&quot;user32.dll&quot;</span>)]</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> extern <span class="type">int</span> <span class="title function_">GetWindowRect</span><span class="params">(IntPtr hwnd, out RECT lpRect)</span>;</span><br><span class="line"></span><br><span class="line">        [System.Runtime.InteropServices.DllImport(<span class="string">&quot;user32&quot;</span>)]</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> extern <span class="type">int</span> <span class="title function_">mouse_event</span><span class="params">(<span class="type">int</span> dwFlags, <span class="type">int</span> dx, <span class="type">int</span> dy, <span class="type">int</span> cButtons, <span class="type">int</span> dwExtraInfo)</span>;</span><br><span class="line">        <span class="comment">//移动鼠标 </span></span><br><span class="line">        const <span class="type">int</span> <span class="variable">MOUSEEVENTF_MOVE</span> <span class="operator">=</span> <span class="number">0x0001</span>;</span><br><span class="line">        <span class="comment">//模拟鼠标右键按下 </span></span><br><span class="line">        const <span class="type">int</span> <span class="variable">MOUSEEVENTF_RIGHTDOWN</span> <span class="operator">=</span> <span class="number">0x0008</span>;</span><br><span class="line">        <span class="comment">//模拟鼠标右键抬起 </span></span><br><span class="line">        const <span class="type">int</span> <span class="variable">MOUSEEVENTF_RIGHTUP</span> <span class="operator">=</span> <span class="number">0x0010</span>;</span><br><span class="line">        <span class="comment">//标示是否采用绝对坐标 </span></span><br><span class="line">        const <span class="type">int</span> <span class="variable">MOUSEEVENTF_ABSOLUTE</span> <span class="operator">=</span> <span class="number">0x8000</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">MouseRightDown</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> count)</span><span class="comment">//要点击的坐标和次数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE | MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, x * <span class="number">65536</span> / <span class="number">1920</span>, y * <span class="number">65536</span> / <span class="number">1080</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Upflaginfo</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,bool info)</span><span class="comment">//更新界面</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (flaginfo[x, y] == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (info == <span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    MouseRightDown((<span class="type">int</span>)spoint.X + x + x * <span class="number">15</span>, (<span class="type">int</span>)spoint.Y + y + y * <span class="number">15</span>, <span class="number">1</span>);<span class="comment">//插旗子</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (info == <span class="literal">false</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    MouseRightDown((<span class="type">int</span>)spoint.X  + x + x * <span class="number">15</span>, (<span class="type">int</span>)spoint.Y  + y + y * <span class="number">15</span>, <span class="number">2</span>);<span class="comment">//取消旗子</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            flaginfo[x, y] = info;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> bool <span class="title function_">IsFlag</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> g, <span class="type">int</span> b)</span><span class="comment">//一个像素点的RGB数据</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">gray</span> <span class="operator">=</span> (r + g + b) / <span class="number">3</span>;<span class="comment">//计算灰度值</span></span><br><span class="line">            <span class="keyword">if</span> (gray &gt; <span class="number">175</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要背景音乐的就在程序开始的地方加上去就好了~</p>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>BadApple</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker笔记</title>
    <url>/Linux/docker-notes/</url>
    <content><![CDATA[<p>Docker笔记</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Nacos-Server"><a href="#Nacos-Server" class="headerlink" title="Nacos Server"></a>Nacos Server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --name nacos -e MODE=standalone -p 8848:8848 -d nacos/nacos-server:latest</span><br></pre></td></tr></table></figure>

<p>MODE    cluster&#x2F;standalone    cluster&#x2F;standalone default cluster</p>
<p><a href="http://192.168.2.211:8848/nacos">http://192.168.2.211:8848/nacos</a></p>
<p>nacos nacos</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dof服务端配置</title>
    <url>/%E6%B8%B8%E6%88%8F/dof-setup-server/</url>
    <content><![CDATA[<p>搭建dof双库端</p>
<span id="more"></span>

<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>my.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">sql-mode=&quot;NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY&#x27;123456&#x27; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">修改虚拟机ip</span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">设置数据库ip地址</span><br><span class="line">UPDATE db_connect SET db_ip=&#x27;192.168.2.200&#x27;;</span><br><span class="line">设置允许ip</span><br><span class="line">INSERT INTO geo_allow (allow_ip) VALUES (&#x27;192.168.2.0&#x27;);</span><br><span class="line">INSERT INTO geo_allow (allow_ip,allow_c_code) VALUES (&#x27;192.168.2.200&#x27;,&#x27;CN&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">更改服务端cfg配置的ip。 160为原虚拟机ip</span><br><span class="line">cd /home/dxf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sed -i &quot;s/你在虚拟机里面用到的ip/你的外网ip/g&quot;  `find . -type f -name &quot;*.tbl&quot;`</span><br><span class="line">sed -i &quot;s/你在虚拟机里面用到的ip/你的外网ip/g&quot;  `find . -type f -name &quot;*.cfg&quot;`</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/192.168.1.160/192.168.2.200/g&quot;  `find . -type f -name &quot;*.tbl&quot;`</span><br><span class="line">sed -i &quot;s/192.168.1.160/192.168.2.200/g&quot;  `find . -type f -name &quot;*.cfg&quot;`</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/192.168.1.200/192.168.2.207/g&quot;  `find . -type f -name &quot;*.tbl&quot;`</span><br><span class="line">sed -i &quot;s/192.168.1.200/192.168.2.207/g&quot;  `find . -type f -name &quot;*.cfg&quot;`</span><br></pre></td></tr></table></figure>



<p><a href="https://docs.qq.com/doc/DRFhlek14RmZiZ3Jl">https://docs.qq.com/doc/DRFhlek14RmZiZ3Jl</a></p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>DNF</tag>
      </tags>
  </entry>
  <entry>
    <title>Frp配合Nginx暴露内网服务</title>
    <url>/%E5%B7%A5%E5%85%B7/frp-notes/</url>
    <content><![CDATA[<p>Frp暴露内网服务、RDP和SSH等，配合Nginx</p>
<span id="more"></span>

<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><a href="https://github.com/fatedier/frp">frp官方仓库</a></p>
<p><a href="https://github.com/MvsCode/frps-onekey">frps脚本</a></p>
<h2 id="配置远程桌面连接"><a href="#配置远程桌面连接" class="headerlink" title="配置远程桌面连接"></a>配置远程桌面连接</h2><h3 id="frps服务端配置"><a href="#frps服务端配置" class="headerlink" title="frps服务端配置"></a>frps服务端配置</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7864</span></span><br><span class="line"><span class="attr">kcp_bind_port</span> = <span class="number">7864</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">18657</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = xxxxxx</span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">9569</span></span><br><span class="line"><span class="attr">log_file</span> = ./frps.log</span><br><span class="line"><span class="comment"># debug, info, warn, error</span></span><br><span class="line"><span class="attr">log_level</span> = info</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"><span class="attr">token</span> = xxxxx</span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="number">50</span></span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">bind_udp_port</span> = <span class="number">9856</span></span><br></pre></td></tr></table></figure>

<h3 id="frpc客户端配置"><a href="#frpc客户端配置" class="headerlink" title="frpc客户端配置"></a>frpc客户端配置</h3><h4 id="被远程控制的主机1"><a href="#被远程控制的主机1" class="headerlink" title="被远程控制的主机1"></a>被远程控制的主机1</h4><p>frpc.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment">#frps服务器公网地址</span></span><br><span class="line"><span class="attr">server_addr</span> = xxx.xxx.xxx.xxx</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7864</span></span><br><span class="line"><span class="attr">protocol</span> = kcp</span><br><span class="line"><span class="attr">token</span> = xxxxx</span><br><span class="line"></span><br><span class="line"><span class="comment">#另一方不需要使用frp，而是通过服务器转发tcp</span></span><br><span class="line"><span class="section">[5600x_rdp_tcp]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3389</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6292</span></span><br><span class="line"></span><br><span class="line"><span class="section">[5600x_rdp_udp]</span></span><br><span class="line"><span class="attr">type</span> = udp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3389</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6292</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p2p配置，无法打洞则使用stcp</span></span><br><span class="line"><span class="section">[5600x_rdp_xtcp]</span></span><br><span class="line"><span class="attr">type</span> = xtcp</span><br><span class="line"><span class="attr">sk</span> = xxx</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3389</span></span><br><span class="line"></span><br><span class="line"><span class="section">[5600x_rdp_sudp]</span></span><br><span class="line"><span class="attr">type</span> = sudp</span><br><span class="line"><span class="attr">sk</span> = xxxx</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3389</span></span><br></pre></td></tr></table></figure>

<h5 id="设置Frp为服务开机自启"><a href="#设置Frp为服务开机自启" class="headerlink" title="设置Frp为服务开机自启"></a>设置Frp为服务开机自启</h5><p><a href="https://github.com/winsw/winsw/releases">下载WinSW</a>  </p>
<p>创建WinSW同名的xml文件放在一起</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 服务的唯一标识 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>frpc<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>frpc<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>frp客户端<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executable</span>&gt;</span>D:\Tool\frp\frpc.exe<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>-c D:\Tool\frp\frpc.ini<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">startmode</span>&gt;</span>Automatic<span class="tag">&lt;/<span class="name">startmode</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 第一次启动失败 120秒重启 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">onfailure</span> <span class="attr">action</span>=<span class="string">&quot;restart&quot;</span> <span class="attr">delay</span>=<span class="string">&quot;120 sec&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 第二次启动失败 600秒后重启 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">onfailure</span> <span class="attr">action</span>=<span class="string">&quot;restart&quot;</span> <span class="attr">delay</span>=<span class="string">&quot;600 sec&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">log</span> <span class="attr">mode</span>=<span class="string">&quot;roll&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">log</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">logpath</span>&gt;</span>D:\Tool\frp\logs<span class="tag">&lt;/<span class="name">logpath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>安装frpc服务:<code>.\WinSW.exe install frpc.xml</code></p>
<p>更新服务配置:<code>.\WinSW.exe refresh frpc.xml</code></p>
<h4 id="发起控制的主机2"><a href="#发起控制的主机2" class="headerlink" title="发起控制的主机2"></a>发起控制的主机2</h4><p>frpc.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment">#frps服务器公网地址</span></span><br><span class="line"><span class="attr">server_addr</span> = xxx.xxx.xxx.xxx</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7864</span></span><br><span class="line"><span class="attr">protocol</span> = kcp</span><br><span class="line"><span class="attr">token</span> = xxxxx</span><br><span class="line"></span><br><span class="line"><span class="comment">#尝试p2p连接</span></span><br><span class="line"><span class="section">[5600x_rdp_visitor]</span></span><br><span class="line"><span class="attr">type</span> = xtcp</span><br><span class="line"><span class="attr">role</span> = visitor</span><br><span class="line"><span class="attr">server_name</span> = <span class="number">5600</span>x_rdp_xtcp</span><br><span class="line"><span class="attr">sk</span> = xxx</span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">6000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[5600x_rdp_udp_visitor]</span></span><br><span class="line"><span class="attr">type</span> = sudp</span><br><span class="line"><span class="attr">role</span> = visitor</span><br><span class="line"><span class="attr">server_name</span> = <span class="number">5600</span>x_rdp_sudp</span><br><span class="line"><span class="attr">sk</span> = xxxx</span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure>

<h4 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h4><p>先开启服务器的frps，在开启主机1的frpc</p>
<p>不想通过服务器转发需要在主机2开启frpc，通过 <code>127.0.0.1:6000</code> 尝试p2p连接主机1</p>
<p>主机2没有frp时可以通过 <code>服务器公网IP:6292</code>连接主机1</p>
<h2 id="配合Nginx暴露内网服务"><a href="#配合Nginx暴露内网服务" class="headerlink" title="配合Nginx暴露内网服务"></a>配合Nginx暴露内网服务</h2><h3 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h3><p><a href="https://www.exception.site/docker/docker-install-nginx">参考教程</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#搞个临时复制出配置</span></span><br><span class="line"><span class="comment">#mkdir /root/nginx/nginx.conf</span></span><br><span class="line">docker run --name tmp-nginx-container -p 80:80 -d nginx</span><br><span class="line"><span class="comment">#docker cp tmp-nginx-container:/etc/nginx/nginx.conf /root/nginx/nginx.conf</span></span><br><span class="line"><span class="comment">#docker cp tmp-nginx-container:/etc/nginx/conf.d/default.conf /root/nginx/conf.d/ default.conf</span></span><br><span class="line"><span class="built_in">mkdir</span> /root/nginx</span><br><span class="line">docker <span class="built_in">cp</span> tmp-nginx-container:/etc/nginx /root</span><br><span class="line">docker <span class="built_in">rm</span> -f tmp-nginx-container</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx.conf和conf.d/default.conf和证书文件提前放好</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行</span></span><br><span class="line">docker run -d \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-p 443:443 \</span><br><span class="line">--name nginx \</span><br><span class="line">--restart always \</span><br><span class="line">-v /root/nginx:/etc/nginx \</span><br><span class="line">-v /root/nginx-logs:/var/log/nginx \</span><br><span class="line">-v /root/nginx-html:/usr/share/nginx/html \</span><br><span class="line">nginx:alpine </span><br></pre></td></tr></table></figure>

<h3 id="Frp配置"><a href="#Frp配置" class="headerlink" title="Frp配置"></a>Frp配置</h3><h4 id="frps"><a href="#frps" class="headerlink" title="frps"></a>frps</h4><p><a href="https://github.com/MvsCode/frps-onekey">一键脚本</a></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># [common] is integral section</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># A literal address or host name for IPv6 must be enclosed</span></span><br><span class="line"><span class="comment"># in square brackets, as in &quot;[::1]:80&quot;, &quot;[ipv6-host]:http&quot; or &quot;[ipv6-host%zone]:80&quot;</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7864</span></span><br><span class="line"><span class="comment"># udp port used for kcp protocol, it can be same with &#x27;bind_port&#x27;</span></span><br><span class="line"><span class="comment"># if not set, kcp is disabled in frps</span></span><br><span class="line"><span class="attr">kcp_bind_port</span> = <span class="number">7864</span></span><br><span class="line"><span class="comment"># if you want to configure or reload frps by dashboard, dashboard_port must be set</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">18657</span></span><br><span class="line"><span class="comment"># dashboard assets directory(only for debug mode)</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = xxxxxx</span><br><span class="line"><span class="comment"># assets_dir = ./static</span></span><br><span class="line"><span class="comment"># nginx要反代这个端口</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">88</span></span><br><span class="line"><span class="comment">#vhost_https_port = 443</span></span><br><span class="line"><span class="comment"># console or real logFile path like ./frps.log</span></span><br><span class="line"><span class="attr">log_file</span> = ./frps.log</span><br><span class="line"><span class="comment"># debug, info, warn, error</span></span><br><span class="line"><span class="attr">log_level</span> = info</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"><span class="comment"># auth token</span></span><br><span class="line"><span class="attr">token</span> = xxxxxx</span><br><span class="line"><span class="comment"># It is convenient to use subdomain configure for http、https type when many people use one frps server together.</span></span><br><span class="line"><span class="comment">#subdomain_host = 101.35.4.132</span></span><br><span class="line"><span class="comment"># only allow frpc to bind ports you list, if you set nothing, there won&#x27;t be any limit</span></span><br><span class="line"><span class="comment">#allow_ports = 1-65535</span></span><br><span class="line"><span class="comment"># pool_count in each proxy will change to max_pool_count if they exceed the maximum value</span></span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="number">50</span></span><br><span class="line"><span class="comment"># if tcp stream multiplexing is used, default is true</span></span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="frpc"><a href="#frpc" class="headerlink" title="frpc"></a>frpc</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano /etc/systemd/system/frpc.service</span><br><span class="line"></span><br><span class="line"><span class="comment">####复制进去</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Frp Client Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line">ExecStart=/root/frp/frpc -c /root/frp/frpc.ini</span><br><span class="line"><span class="comment">####</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> frpc</span><br><span class="line">systemctl start frpc</span><br><span class="line">systemctl status frpc</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = frp.nicenan.cn</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7864</span></span><br><span class="line"><span class="attr">token</span> = xxxx</span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">4528</span></span><br><span class="line"></span><br><span class="line"><span class="section">[DOCKER_PORTAINER]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">192.168</span>.<span class="number">2.149</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">9000</span></span><br><span class="line"><span class="attr">custom_domains</span> = qinglong.nicenan.cn</span><br></pre></td></tr></table></figure>

<h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><h4 id="default-conf"><a href="#default-conf" class="headerlink" title="default.conf"></a>default.conf</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="comment">#填写绑定证书的域名</span></span><br><span class="line">    <span class="attribute">server_name</span>  qinglong.nicenan.cn; </span><br><span class="line">    <span class="comment">#证书文件名称</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span>  ssl/qinglong.nicenan.cn.crt; </span><br><span class="line">    <span class="comment">#私钥文件名称</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> ssl/qinglong.nicenan.cn.key; </span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="comment"># 需要代理的容器ip或容器别名，我设置的容器别名是filebrowser，也可以直接这个容器的ip：172.18.0.2</span></span><br><span class="line">    <span class="comment"># http端口默认是80，和filebrowser映射端口相同，所以没加端口，如果filebrowser映射的是其它端口，如8089，那就写：http://filebrowser:8089</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://qinglong.nicenan.cn:88;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向代理buffer</span></span><br><span class="line">    <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">proxy_buffer_size</span> <span class="number">128k</span>;</span><br><span class="line">    <span class="attribute">proxy_buffers</span> <span class="number">100</span> <span class="number">128k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection keep-alive;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    <span class="attribute">proxy_cache_bypass</span> <span class="variable">$http_upgrade</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="comment">#填写绑定证书的域名</span></span><br><span class="line">    <span class="attribute">server_name</span> qinglong.nicenan.cn; </span><br><span class="line">    <span class="comment">#把http的域名请求转成https</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Acme自动ssl证书"><a href="#Acme自动ssl证书" class="headerlink" title="Acme自动ssl证书"></a>Acme自动ssl证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br><span class="line"><span class="comment">#然后重启终端</span></span><br><span class="line"><span class="comment">#进入dnspod设置api密钥，记录id和token(key)</span></span><br><span class="line"><span class="comment">#使用dns验证方式签发证书 ，设置环境变量</span></span><br><span class="line"><span class="built_in">export</span> DP_Id=<span class="string">&quot;291441&quot;</span></span><br><span class="line"><span class="built_in">export</span> DP_Key=<span class="string">&quot;7c915c94eb53b0f7cc70425e78aef3fe&quot;</span></span><br><span class="line"><span class="comment"># --keylength ec-256  签发 ECC 证书</span></span><br><span class="line">acme.sh --issue --dns dns_dp -d nicenan.cn -d *.nicenan.cn --keylength ec-256 --server letsencrypt</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启自动复制到nginx 并重启nginx容器</span></span><br><span class="line"></span><br><span class="line">acme.sh --installcert -d nicenan.cn \</span><br><span class="line">--key-file       /root/nginx/ssl/nicenan.cn.key  \</span><br><span class="line">--fullchain-file /root/nginx/ssl/nicenan.cn.cer \</span><br><span class="line">--reloadcmd     <span class="string">&quot;docker restart nginx&quot;</span> \</span><br><span class="line">--ecc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 三级域名版本</span></span><br><span class="line"></span><br><span class="line">acme.sh --issue --dns dns_dp -d n1.nicenan.cn -d *.n1.nicenan.cn --keylength ec-256 --server letsencrypt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">acme.sh --installcert -d n1.nicenan.cn \</span><br><span class="line">--key-file       /root/nginx/ssl/n1.nicenan.cn.key  \</span><br><span class="line">--fullchain-file /root/nginx/ssl/n1.nicenan.cn.cer \</span><br><span class="line">--reloadcmd     <span class="string">&quot;docker restart nginx&quot;</span> \</span><br><span class="line">--ecc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启通知Bark通知</span></span><br><span class="line"><span class="built_in">export</span> BARK_API_URL=<span class="string">&quot;https://api.day.app/XXXXXXXXXXXXXXXXXXXXXX&quot;</span></span><br><span class="line"><span class="built_in">export</span> BARK_GROUP=ACME</span><br><span class="line">acme.sh --set-notify --notify-hook bark</span><br></pre></td></tr></table></figure>

<h3 id="支持多个服务"><a href="#支持多个服务" class="headerlink" title="支持多个服务"></a>支持多个服务</h3><h4 id="Frp配置-1"><a href="#Frp配置-1" class="headerlink" title="Frp配置"></a>Frp配置</h4><p>frpc.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = xxx.xxx.xxx.xxx</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7864</span></span><br><span class="line"><span class="attr">protocol</span> = kcp</span><br><span class="line"><span class="attr">token</span> = xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[docker_portainer]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">9000</span></span><br><span class="line"><span class="attr">custom_domains</span> = docker.n1.nicenan.cn</span><br><span class="line"></span><br><span class="line"><span class="section">[netdata]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">19999</span> </span><br><span class="line"><span class="attr">custom_domains</span> = netdata.n1.nicenan.cn</span><br></pre></td></tr></table></figure>

<p>frps.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7864</span></span><br><span class="line"><span class="attr">kcp_bind_port</span> = <span class="number">7864</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">18657</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = xxx</span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">9569</span></span><br><span class="line"><span class="attr">log_file</span> = ./frps.log</span><br><span class="line"><span class="attr">log_level</span> = info</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"><span class="attr">token</span> = xxx</span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="number">50</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Nginx配置-1"><a href="#Nginx配置-1" class="headerlink" title="Nginx配置"></a>Nginx配置</h4><p>以下都是docker挂载到nginx容器的目录 &#x2F;root&#x2F;nginx</p>
<p>初始配置：  &#x2F;root&#x2F;nginx&#x2F;nginx.conf</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">user</span>  nginx;</span><br><span class="line"><span class="attribute">worker_processes</span>  auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/<span class="literal">error</span>.log <span class="literal">notice</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>需要反代的一系列配置：&#x2F;root&#x2F;nginx&#x2F;conf.d&#x2F;n1.conf</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="comment">#填写绑定证书的域名</span></span><br><span class="line">    <span class="attribute">server_name</span>  docker.n1.nicenan.cn; </span><br><span class="line">    <span class="comment">#证书文件配置</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/n1.ssl;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://docker.n1.nicenan.cn:9569;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向代理buffer配置</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/fxdl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="comment">#填写绑定证书的域名</span></span><br><span class="line">    <span class="attribute">server_name</span>  netdata.n1.nicenan.cn; </span><br><span class="line">    <span class="comment">#证书文件配置</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/n1.ssl;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://netdata.n1.nicenan.cn:9569;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向代理buffer配置</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/fxdl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="comment">#填写绑定证书的域名</span></span><br><span class="line">    <span class="attribute">server_name</span> <span class="regexp">*.n</span>1.nicenan.cn; </span><br><span class="line">    <span class="comment">#把http的域名请求转成https</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>证书配置(泛域名证书，配合acme自动更新):&#x2F;root&#x2F;nginx&#x2F;conf.d&#x2F;n1.ssl</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssl_certificate</span>  ssl/n1.nicenan.cn.cer; </span><br><span class="line"><span class="attribute">ssl_certificate_key</span> ssl/n1.nicenan.cn.key; </span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line"><span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"><span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure>

<p>反向代理buffer配置:&#x2F;root&#x2F;nginx&#x2F;conf.d&#x2F;fxdl</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line"><span class="attribute">proxy_buffer_size</span> <span class="number">128k</span>;</span><br><span class="line"><span class="attribute">proxy_buffers</span> <span class="number">100</span> <span class="number">128k</span>;</span><br><span class="line"><span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Connection keep-alive;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"><span class="attribute">proxy_cache_bypass</span> <span class="variable">$http_upgrade</span>;</span><br></pre></td></tr></table></figure>

<p>每次只需增加一条frpc的配置，并在nginx设置反代即可</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Frp</tag>
        <tag>Nginx</tag>
        <tag>Acme</tag>
        <tag>WinSW</tag>
      </tags>
  </entry>
  <entry>
    <title>海哥逆向笔记</title>
    <url>/%E9%80%86%E5%90%91/haige-reverse/</url>
    <content><![CDATA[<p>海哥逆向学习笔记记录</p>
<span id="more"></span>

<h1 id="工具软件下载"><a href="#工具软件下载" class="headerlink" title="工具软件下载"></a>工具软件下载</h1><p>调试</p>
<ul>
<li><a href="https://github.com/x64dbg/x64dbg">x64dbg</a></li>
</ul>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p><a href="https://www.jb51.net/article/230062.htm">图文详解通俗易懂的汇编语言寄存器_汇编语言_脚本之家</a></p>
<p><a href="https://blog.csdn.net/weixin_46222091/article/details/109205298">32位CPU寄存器常用知识汇总_ronnie88597的博客-CSDN博客_32位寄存器有哪些</a></p>
<img src="/%E9%80%86%E5%90%91/haige-reverse/image-20220806202642275.png" class="" title="image-20220806202642275">

<h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p><code>AX(Accumulator Register)</code> ： 累加寄存器，它主要用于输入&#x2F;输出和大规模的指令运算</p>
<ul>
<li>EAX 经常用于作为返回值</li>
</ul>
<p><code>CX(Count Register)</code>：计数寄存器，CX 寄存器在迭代的操作中会循环计数</p>
<p><code>DX(data Register)</code>：数据寄存器，它也用于输入&#x2F;输出操作。它还与 AX 寄存器以及 DX 一起使用，用于涉及大数值的乘法和除法运</p>
<p><code>BX(Base Register)</code>：基址寄存器，用来存储基础访问地址</p>
<p>算</p>
<p>除了上面 AX、BX、CX、DX 寄存器以外，其他寄存器均不可以分为两个独立的 8 位寄存器</p>
<h3 id="索引寄存器"><a href="#索引寄存器" class="headerlink" title="索引寄存器"></a>索引寄存器</h3><p>索引寄存器主要包含段地址的偏移量，索引寄存器主要分为</p>
<p><code>BP(Base Pointer)</code>：基础指针，它是栈寄存器上的偏移量，用来定位栈上变量，<strong>栈底</strong></p>
<p><code>SP(Stack Pointer)</code>: 栈指针，它是栈寄存器上的偏移量，用来定位<strong>栈顶</strong></p>
<p><code>SI(Source Index)</code>: 变址寄存器，用来拷贝源字符串</p>
<p><code>DI(Destination Index)</code>: 目标变址寄存器，用来复制到目标字符串</p>
<h3 id="控制寄存器"><a href="#控制寄存器" class="headerlink" title="控制寄存器"></a>控制寄存器</h3><p>就剩下两种寄存器还没聊了，这两种寄存器是指令指针寄存器和标志寄存器：</p>
<p><code>IP(Instruction Pointer)</code>： 指令指针寄存器，它是从 Code Segment 代码寄存器处的偏移来存储执行的下一条指令</p>
<h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><img src="/%E9%80%86%E5%90%91/haige-reverse/image-20220807160959758.png" class="" title="image-20220807160959758">

<ol>
<li><p><strong>CF</strong> (Carry  Flag) 进位标志：如果运算结果的<strong>最高位</strong>（先确定数据宽度）产生了一个进位或借位，那么，其值为1，否则其值为0。无符号运算时关注</p>
<ol>
<li>只影响CF的值：<code>mov al, 0xFE | add al, 0x10</code></li>
</ol>
</li>
<li><p><strong>PF</strong> (Parity  Flag) 奇偶标志：奇偶标志PF用于反映运算结果中(<strong>最低有效字节</strong>，最低八位)“1”的个数为奇数个PF为0，偶数个为1</p>
<ol>
<li><code>mov eax, 0x0  |  add eax, 0x3</code></li>
</ol>
</li>
<li><p><strong>AF</strong> (Auxiliary  Carry Flag) 辅助进位标志：在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：</p>
<ol>
<li>在字操作时，发生低字节向高字节进位或借位时 ；FF<strong>F</strong>F</li>
<li>在字节操作时，发生低4位向高4位进位或借位时。F<strong>F</strong></li>
<li>FFFF<strong>F</strong>FFF，看加粗位置最高位是否为1</li>
<li><code>mov al, 0x49  |  add al, 0x8</code></li>
</ol>
</li>
<li><p><strong>ZF</strong> (Zero  Flag) 零标志：零标志ZF用来反映运算结果是否为0。（mov指令不是运算）</p>
</li>
<li><p><strong>SF</strong>(Sign  Flag) 符号标志：符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。</p>
<ol>
<li>负数,SF&#x3D;1,正数SF&#x3D;0</li>
<li><code>mov al, 0xF3  |  sub al, 0x1</code></li>
</ol>
</li>
<li><p><strong>OF</strong>(Overflow  Flag) 溢出标志：溢出标志OF用于反映<strong>有符号</strong>数加减运算所得结果是否溢出。</p>
<ol>
<li><img src="/%E9%80%86%E5%90%91/haige-reverse/image-20220807163832637.png" class="" title="image-20220807163832637"></li>
<li>正 + 正 &#x3D; 正（无溢出），如果结果是负数，则说明有溢出</li>
<li>负 + 负 &#x3D; 负（无溢出），如果结果是正数，则说明有溢出</li>
<li>正 + 负 永远都不会有溢出</li>
<li>CPU判断OF，首先看符号位是(1)否(0)有进位，再看最高有效数值位(符号位低一位)是(1)否(0)有向符号位产生进位，然后求xor。例：<code>0xC0+0x40，1 xor 0 = 1 , OF=1</code> </li>
<li><code>mov al,0x80   | sub al,0x10 </code></li>
</ol>
</li>
<li><p><strong>DF</strong> (Direction Flag) 方向标志：决定ESI，EDI的移动方向。0为加，1为减，加减量为字节数</p>
</li>
</ol>
<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>常用计量单位</p>
<p><strong>BYTE</strong>(字节) &#x3D; 8位(BIT)  <code>0XFF</code></p>
<p><strong>WORD</strong>(字) &#x3D; 16位(BIT) <code>0XFFFF</code></p>
<p><strong>DWORD</strong>(双字) &#x3D; 32位(BIT) <code>0XFFFFFFFF</code></p>
<p>每个内存单元的宽度为8位，[编号]称为地址(加上中括号)</p>
<h3 id="寻址公式"><a href="#寻址公式" class="headerlink" title="寻址公式"></a>寻址公式</h3><ul>
<li>[立即数]</li>
<li>[reg] reg代表寄存器</li>
<li>[reg+立即数]</li>
<li>[reg+reg*(1,2,4,8)]</li>
<li>[reg+reg*(1,2,4,8)+立即数]</li>
</ul>
<p>​	</p>
<h2 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h2><p>Windows分配栈时：栈底高地址，栈头低地址</p>
<h3 id="堆栈汇编指令"><a href="#堆栈汇编指令" class="headerlink" title="堆栈汇编指令"></a>堆栈汇编指令</h3><ul>
<li><strong>PUSH</strong> 入栈<ul>
<li>push立即数(32位)，栈顶-4</li>
<li>push寄存器16位(栈顶-2)，32位，不允许8位</li>
<li>push内存，同样不允许8位</li>
</ul>
</li>
<li><strong>POP</strong> 出栈<ul>
<li>栈顶+4或+2</li>
<li>同push规则，不允许8位</li>
</ul>
</li>
<li>PUSHAD<ul>
<li>把8个通用寄存器的值保存到堆栈，然后就可以随意使用寄存器（保存现场）</li>
</ul>
</li>
<li>POPAD<ul>
<li>恢复8个寄存器的值</li>
</ul>
</li>
</ul>
<h3 id="Windows堆栈"><a href="#Windows堆栈" class="headerlink" title="Windows堆栈"></a>Windows堆栈</h3><ol>
<li>先进后出</li>
<li>向低地址扩展</li>
</ol>
<p>函数调用前后堆栈需要平衡</p>
<h2 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h2><ul>
<li><p><strong>MOV</strong> 目标操作数，源操作数。作用：拷贝源操作数到目标操作数</p>
<ul>
<li>从指定内存中写入&#x2F;读取数据<ul>
<li><code>mov dword ptr ds:[0x0012FF34],0x12345678</code><ul>
<li>dword ：要读&#x2F;写多少 此时是4字节  byte &#x3D;&#x3D; 1字节 word &#x3D;&#x3D; 2字节 dword &#x3D;&#x3D; 4字节</li>
<li>ptr: Point 代表后面是一个指针  (指针的意思就是里面存的不是普通的值，而是个地址)</li>
<li>ds：段寄存器 先不用管 记住就行</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>LEA</strong> 获取内存地址</p>
<ul>
<li>例如想获取一个内存地址，其实无法使用 <code>mov eax,eax-4</code> 这种写法</li>
<li>可以写成 <code>lea eax,dword ptr ds:[eax-4]</code></li>
<li>等同于 <code>sub eax,4</code></li>
</ul>
</li>
<li><p><strong>XCHG</strong> 交换数据 <code>XCHG R/M,R/M/IMM</code></p>
</li>
<li><p><strong>MOVS</strong> 移动指定内存地址的数据数据(内存,内存)，EDI和ESI受DF位影响</p>
<ul>
<li><code>MOVS BYTE PTR  ES:[EDI],BYTE PTR DS:[ESI] </code>简写为：<code>MOVSB</code></li>
<li><code>MOVS WORD PTR  ES:[EDI],WORD PTR DS:[ESI]</code>简写为：<code>MOVSW</code></li>
<li><code>MOVS DWORD PTR  ES:[EDI],DWORD PTR DS:[ESI]</code>简写为：<code>MOVSD</code></li>
</ul>
</li>
<li><p><strong>STOS</strong> 将<code>Al/AX/EAX</code>的值存储到[EDI]指定的内存单元，根据宽度决定存多少，EDI受DF位影响</p>
<ul>
<li><code>STOS BYTE PTR  ES:[EDI]</code>简写为<code>STOSB</code></li>
<li><code>STOS WORD PTR  ES:[EDI]</code>简写为<code>STOSW</code></li>
<li><code>STOS DWORD PTR  ES:[EDI]</code>简写为<code>STOSD</code></li>
</ul>
</li>
<li><p><strong>REP</strong> 按计数寄存器 (ECX)  中指定的次数重复执行字符串指令(ECX会自己-1)</p>
<ul>
<li>例 <code>REP MOVSD</code> ,<code>REP STOSD</code></li>
</ul>
</li>
<li><p><strong>JMP</strong> 只修改EIP的值<code>JMP reg/imm</code>，地址小于128字节会自动加上short</p>
</li>
<li><p><strong>CALL</strong> 修改EIP的值，并把下一行指令的地址压入栈<code>CALL reg/imm</code></p>
</li>
<li><p><strong>RET</strong>  从栈中取出地址，并且修改EIP的值<code>POP EIP</code></p>
</li>
<li><p><strong>RETN</strong> ret的同时平衡堆栈，可以用来判断函数的参数个数 <code>POP EIP   add esp, n</code></p>
</li>
<li><p><strong>CMP</strong>  （实际是SUB，但是只改标志寄存器的值），参数不能同时为内存<code>CMP R/M,R/M/IMM</code></p>
<ul>
<li>比较两个操作数是否相等，看ZF位是否位0</li>
<li>两个数大小，看SF位</li>
</ul>
</li>
<li><p><strong>TEST</strong> 两个数值进行与操作，结果不保存，会改变相应标志位<code>TEST R/M,R/M/IMM</code></p>
<ul>
<li><code>TEST eax,eax</code> 判断某寄存器是否为0，根据ZF位是否为1</li>
</ul>
</li>
</ul>
<h3 id="JCC指令"><a href="#JCC指令" class="headerlink" title="JCC指令"></a>JCC指令</h3><table>
<thead>
<tr>
<th align="left">JCC指令</th>
<th align="left">中文含义</th>
<th align="left">英文原意</th>
<th align="left">检查符号位</th>
<th align="left">典型C应用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">JZ&#x2F;JE</td>
<td align="left">若为0则跳转；若相等则跳转</td>
<td align="left">jump if zero;jump if equal</td>
<td align="left">ZF&#x3D;1</td>
<td align="left"><code>if (i == j);if (i == 0);</code></td>
</tr>
<tr>
<td align="left">JNZ&#x2F;JNE</td>
<td align="left">若不为0则跳转；若不相等则跳转</td>
<td align="left">jump if not zero;jump if not equal</td>
<td align="left">ZF&#x3D;0</td>
<td align="left"><code>if (i != j);if (i != 0);</code></td>
</tr>
<tr>
<td align="left">JS</td>
<td align="left">若为负则跳转</td>
<td align="left">jump if sign</td>
<td align="left">SF&#x3D;1</td>
<td align="left"><code>if (i &lt; 0);</code></td>
</tr>
<tr>
<td align="left">JNS</td>
<td align="left">若为正则跳转</td>
<td align="left">jump if not sign</td>
<td align="left">SF&#x3D;0</td>
<td align="left"><code>if (i &gt; 0);</code></td>
</tr>
<tr>
<td align="left">JP&#x2F;JPE</td>
<td align="left">若1出现次数为偶数则跳转</td>
<td align="left">jump if Parity (Even)</td>
<td align="left">PF&#x3D;1</td>
<td align="left">(null)</td>
</tr>
<tr>
<td align="left">JNP&#x2F;JPO</td>
<td align="left">若1出现次数为奇数则跳转</td>
<td align="left">jump if not parity (odd)</td>
<td align="left">PF&#x3D;0</td>
<td align="left">(null)</td>
</tr>
<tr>
<td align="left">JO</td>
<td align="left">若溢出则跳转</td>
<td align="left">jump if overflow</td>
<td align="left">OF&#x3D;1</td>
<td align="left">(null)</td>
</tr>
<tr>
<td align="left">JNO</td>
<td align="left">若无溢出则跳转</td>
<td align="left">jump if not overflow</td>
<td align="left">OF&#x3D;0</td>
<td align="left">(null)</td>
</tr>
<tr>
<td align="left">JC&#x2F;JB&#x2F;JNAE</td>
<td align="left">若进位则跳转；若低于则跳转；若不高于等于则跳转</td>
<td align="left">jump if carry;jump if below;jump if not above equal</td>
<td align="left">CF&#x3D;1</td>
<td align="left"><code>if (i &lt; j);</code></td>
</tr>
<tr>
<td align="left">JNC&#x2F;JNB&#x2F;JAE</td>
<td align="left">若无进位则跳转；若不低于则跳转；若高于等于则跳转；</td>
<td align="left">jump if not carry;jump if not below;jump if above equal</td>
<td align="left">CF&#x3D;0</td>
<td align="left"><code>if (i &gt;= j);</code></td>
</tr>
<tr>
<td align="left">JBE&#x2F;JNA</td>
<td align="left">若低于等于则跳转；若不高于则跳转</td>
<td align="left">jump if below equal;jump if not above</td>
<td align="left">ZF&#x3D;1或CF&#x3D;1</td>
<td align="left"><code>if (i &lt;= j);</code></td>
</tr>
<tr>
<td align="left">JNBE&#x2F;JA</td>
<td align="left">若不低于等于则跳转；若高于则跳转</td>
<td align="left">jump if not below equal;jump if above</td>
<td align="left">ZF&#x3D;0或CF&#x3D;0</td>
<td align="left"><code>if (i &gt; j);</code></td>
</tr>
<tr>
<td align="left">JL&#x2F;JNGE</td>
<td align="left">若小于则跳转；若不大于等于则跳转</td>
<td align="left">jump if less;jump if not greater equal</td>
<td align="left">SF !&#x3D; OF</td>
<td align="left"><code>if (si &lt; sj);</code></td>
</tr>
<tr>
<td align="left">JNL&#x2F;JGE</td>
<td align="left">若不小于则跳转；若大于等于则跳转；</td>
<td align="left">jump if not less;jump if greater equal</td>
<td align="left">SF &#x3D; OF</td>
<td align="left"><code>if (si &gt;= sj);</code></td>
</tr>
<tr>
<td align="left">JLE&#x2F;JNG</td>
<td align="left">若小于等于则跳转；若不大于则跳转</td>
<td align="left">jump if less equal;jump if not greater</td>
<td align="left">SF !&#x3D; OF 或 ZF&#x3D;1</td>
<td align="left"><code>if (si &lt;= sj);</code></td>
</tr>
<tr>
<td align="left">JNLE&#x2F;JG</td>
<td align="left">若不小于等于则跳转；若大于则跳转</td>
<td align="left">jump if not less equal;jump if greater</td>
<td align="left">SF&#x3D;0F 且 ZF&#x3D;0</td>
<td align="left"><code>if(si&gt;sj)</code></td>
</tr>
</tbody></table>
<h3 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h3><ul>
<li><p><strong>ADD</strong> 加</p>
</li>
<li><p><strong>SUB</strong> 减</p>
</li>
<li><p><strong>AND</strong> 与</p>
</li>
<li><p><strong>OR</strong> 或</p>
</li>
<li><p><strong>XOR</strong>  异或，经常用于eax清零(<code>xor eax,eax</code>)，影响ZF标志位</p>
<ul>
<li>源操作数可以是立即数、通用寄存器、段寄存器、或者内存单元</li>
<li>目标操作数可以是通用寄存器、段寄存器或者内存单元</li>
<li>操作数的<strong>宽度</strong>必须一样</li>
<li>源操作数和目标操作数不能同时为内存单元</li>
</ul>
</li>
<li><p><strong>NOT</strong> 非 只有一个操作数</p>
</li>
<li><p><strong>ADC</strong> 带进位加法，额外加上CF标志位的值</p>
</li>
<li><p><strong>SBB</strong> 带借位减法</p>
</li>
</ul>
<h3 id="汇编中的函数-debug版"><a href="#汇编中的函数-debug版" class="headerlink" title="汇编中的函数(debug版)"></a>汇编中的函数(debug版)</h3><p>debug版call最后可能有一个检查堆栈是否平衡的call：</p>
<ul>
<li><code>add esp xx</code>，使esp和ebp在同一个地址</li>
<li><code>cmp  ebp,esp</code> 判断ebp和esp是否相等</li>
<li><code>call __RTC_CheckEsp (xxxxxxxx)</code> 进入一个检查esp的call，出错会返回异常</li>
<li><code>mov esp,ebp ;  pop ebp</code>没问题的话拉下栈顶，恢复栈底</li>
</ul>
<img src="/%E9%80%86%E5%90%91/haige-reverse/image-20220820001420235.png" class="" title="image-20220820001420235">







<h2 id="C-x2F-C"><a href="#C-x2F-C" class="headerlink" title="C&#x2F;C++"></a>C&#x2F;C++</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>需要注意的三要素：1、存储数据的宽度；2、存储数据的格式；3、作用范围(作用域)</p>
<h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><table>
<thead>
<tr>
<th>类型</th>
<th>宽度</th>
<th>字节数</th>
<th>对应汇编类型</th>
</tr>
</thead>
<tbody><tr>
<td><strong>char</strong></td>
<td>8BIT</td>
<td>1字节</td>
<td>byte</td>
</tr>
<tr>
<td><strong>short</strong></td>
<td>16BIT</td>
<td>2字节</td>
<td>word</td>
</tr>
<tr>
<td><strong>int</strong></td>
<td>32BIT</td>
<td>4字节</td>
<td>dword</td>
</tr>
<tr>
<td><strong>long</strong></td>
<td>32BIT</td>
<td>4字节</td>
<td></td>
</tr>
</tbody></table>
<p>如果类型超过宽度，只存储低位，舍去多余高位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char a = 0x12345678;</span><br><span class="line">mov byte ptr [ebp-5],78h  </span><br></pre></td></tr></table></figure>

<p><strong>unsigned</strong> 无符号数 <code>unsigned char</code>。1、在内存中存储的方式完全一样；2、在做运算的时候需要注意</p>
<h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><p>float和double在存储方式上都是遵从IEEE的规范的</p>
<p><strong>float</strong>的存储方式如下图所示：</p>
<img src="/%E9%80%86%E5%90%91/haige-reverse/image-20220821150830033.png" class="" title="image-20220821150830033">



<p><strong>double</strong>的存储方式如下图所示：</p>
<img src="/%E9%80%86%E5%90%91/haige-reverse/image-20220821150849031.png" class="" title="image-20220821150849031">



<p>将一个float型转化为内存存储格式的步骤为：</p>
<ol>
<li>先将这个实数的绝对值化为二进制格式。</li>
<li>将这个二进制格式实数的小数点左移或右移n位，直到小数点移动到第一个有效数字的右边。</li>
<li>从小数点右边第一位开始数出二十三位数字放入第22到第0位。 </li>
<li>如果实数是正的，则在第31位放入“0”，否则放入“1”。</li>
<li>填充指数部分：</li>
<li>左移n位，指数为n，右移n位，指数为n&#x3D; -n</li>
<li>用127+(n)，这个数转2进制，放入指数部分即可</li>
<li>另一种办法填充指数部分：</li>
<li>如果n  是左移得到的，说明指数是正的，第30位放入“1”。如果n是右移得到的或n&#x3D;0，则第30位放入“0”。</li>
<li>如果n是左移得到的，则将n减去1后化为二进制，并在左边加“0”补足七位，放入第29到第23位。</li>
</ol>
<p><strong>举例说明</strong>：</p>
<img src="/%E9%80%86%E5%90%91/haige-reverse/image-20220821152124319.png" class="" title="image-20220821152124319">





<h4 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h4><ol>
<li>ASCII 码使用指定的 7 位或  8 位二进制数组合来表示 128 或 256 种可能的字符。</li>
<li>标准 ASCII 码使用 7  位二进制数来表示所有的大写和小写字母，数字 0 到 9、标点符号，以及在美式英语中使用的特殊控制字符。最高位是0。</li>
<li>扩展 ASCII  码允许将每个字符的第 8 位用于确定附加的 128 个特殊符号字符、外来语字母和图形符号。</li>
</ol>
<h4 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h4><p>把那些127号之后的奇异符号们（即EASCII）取消掉，规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。</p>
<p>在这些编码里，还把数学符号、罗马希腊的  字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</p>
<p>思考题：截取一个字符串的一段，如何区分是英文还是中文？</p>
<p>汉字最高位1，英文最高位0?</p>
<h3 id="裸函数"><a href="#裸函数" class="headerlink" title="裸函数"></a>裸函数</h3><p>普通函数编译器会为我们做很多事情，生成一些汇编语句</p>
<p>裸函数不生成任何汇编代码，以<code>int 3 (CC)</code> 填充</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义了一个裸函数，返回值、函数名和参数可以任意</span></span><br><span class="line"><span class="type">int</span> __declspec(naked) <span class="built_in">Sum</span>(<span class="type">int</span> x, <span class="type">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//在里面写汇编代码</span></span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//保留调用前的栈底</span></span><br><span class="line">		push ebp</span><br><span class="line">		<span class="comment">//提升堆栈</span></span><br><span class="line">		mov ebp, esp</span><br><span class="line">		sub esp, <span class="number">0x40</span></span><br><span class="line">		<span class="comment">//保留现场</span></span><br><span class="line">		push ebx</span><br><span class="line">		push esi</span><br><span class="line">		push edi</span><br><span class="line">		<span class="comment">//开始填充缓冲区</span></span><br><span class="line">		mov eax, <span class="number">0xCCCCCCCC</span></span><br><span class="line">		mov ecx, <span class="number">0x10</span></span><br><span class="line">		lea edi, dword ptr  ds : [ebp - <span class="number">0x40</span>]</span><br><span class="line">		rep stosd</span><br><span class="line">		<span class="comment">//函数的核心功能</span></span><br><span class="line">		mov eax, dword ptr ds : [ebp + <span class="number">0x8</span>]</span><br><span class="line">		add eax, dword ptr ds : [ebp + <span class="number">0xc</span>]</span><br><span class="line">		<span class="comment">//恢复现场</span></span><br><span class="line">		pop edi</span><br><span class="line">		pop esi</span><br><span class="line">		pop ebx</span><br><span class="line">		<span class="comment">//降低堆栈</span></span><br><span class="line">		mov esp, ebp</span><br><span class="line">		pop ebp</span><br><span class="line">		<span class="comment">//自己写ret</span></span><br><span class="line">		ret</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h3><p>加在方法名前：<code>int __cdecl Plus(int a, int b)</code></p>
<table>
<thead>
<tr>
<th>调用约定</th>
<th>参数压栈顺序</th>
<th>平衡堆栈</th>
</tr>
</thead>
<tbody><tr>
<td>__cdecl（默认）</td>
<td>从右至左入栈</td>
<td>调用者清理栈（外平栈）</td>
</tr>
<tr>
<td>__stdcall（Win32API）</td>
<td>从右至左入栈</td>
<td>自身清理堆栈（内平栈）</td>
</tr>
<tr>
<td>__fastcall（寄存器比内存快）</td>
<td>ECX&#x2F;EDX传送前两个，剩下 从右至左入栈</td>
<td>自身清理堆栈（2个参数内不用平栈）</td>
</tr>
</tbody></table>
<h3 id="找程序的入口"><a href="#找程序的入口" class="headerlink" title="找程序的入口"></a>找程序的入口</h3><p>控制台程序 main 函数被调用前要先调用的函数如下：<code>GetVersion() </code>,<code>_heap_init() </code>,<code>GetCommandLineA() </code>,<code>_crtGetEnvironmentStringsA() </code>,<code>_setargv()</code>,<code>_setenvp()</code>,<code>_cinit()</code> 这些都是控制台程序需要初始化用的。</p>
<p>若看出上面的某一个(反汇编窗口可能智能显示出以上方法名)，在它后面找有三个参数的call，那个就是入口</p>
<h2 id="X64DBG"><a href="#X64DBG" class="headerlink" title="X64DBG"></a>X64DBG</h2><p>导出修改过的文件，菜单 文件-补丁(<code>ctrl+P</code> )，再点击修补文件</p>
<h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><ul>
<li>左下方命令窗口输入 <code>bp MessageBoxA</code></li>
<li>反汇编窗口选中一行按<code>F2</code>开关断点</li>
<li>断点窗口选中一行按空格 开关断点</li>
</ul>
<p>在堆栈窗口选一行按Enter，可以在反汇编中转到指定Dword，一般栈顶保存到是函数的返回地址。</p>
<p>选项-选项-取消勾选系统断点-选中入口断点：这样和画堆栈图时配置一样。</p>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>跳转到某地址：<code>Ctrl+G</code> 反汇编窗口</p>
<p>F7步入CALL后，连续很多JMP，按回车直接跳转到最后地址，在按F8过来</p>
<p>Enter进函数，减号出函数</p>
<h2 id="Visual-Studio-2022"><a href="#Visual-Studio-2022" class="headerlink" title="Visual Studio 2022"></a>Visual Studio 2022</h2><h3 id="内存与寄存器窗口："><a href="#内存与寄存器窗口：" class="headerlink" title="内存与寄存器窗口："></a>内存与寄存器窗口：</h3><p>Visual Studio 提供了几个窗口，可用于查看局部变量、全局变量、寄存器和任意内存缓冲区。 若要打开以下任何窗口，请从 “<strong>调试</strong>“ 菜单中选择 “ <strong>Windows</strong>“。</p>
<ul>
<li>局部变量</li>
<li>自动</li>
<li>寄存器</li>
<li>观看</li>
<li>内存<ul>
<li>若要启用“内存”窗口，必须在“工具”&gt;“选项”（或“调试”&gt;“选项”）&gt;“调试”&gt;“常规”中选择“启用地址级调试”。</li>
<li>内存窗口的地址搜索栏之中使用<code>&amp;变量名</code>转到对应变量的内存地址</li>
<li>内存窗口的地址搜索栏之中输入方法名即可跳转到方法内存地址，或者选中方法名拖进内存窗口</li>
</ul>
</li>
</ul>
<h3 id="反汇编窗口"><a href="#反汇编窗口" class="headerlink" title="反汇编窗口"></a>反汇编窗口</h3><p>在调试程序时，右键源代码选择<strong>转到反汇编</strong>,在反汇编窗口右键可以设置需要显示的数据</p>
<p>右键取消 <strong>显示符号名</strong> 可以不通过变量名查看</p>
<h3 id="调用堆栈窗口"><a href="#调用堆栈窗口" class="headerlink" title="调用堆栈窗口"></a>调用堆栈窗口</h3><ul>
<li>打开反汇编窗口，双击堆栈窗口内一条，可以跳转到相应位置</li>
<li>右键可以设置<strong>显示外部代码</strong>，可以找到调用main方法的地方</li>
</ul>
]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>寄存器</tag>
        <tag>汇编</tag>
        <tag>X64dbg</tag>
      </tags>
  </entry>
  <entry>
    <title>Java生成验证码的工具类</title>
    <url>/Java/java-verificationcode-util/</url>
    <content><![CDATA[<p>生成验证码的工具类,可以生成简单的验证码</p>
<span id="more"></span>

<figure class="highlight java"><figcaption><span>VerificationCodeUtils</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> nicenan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerificationCodeUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">interLine</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">noiseRate</span> <span class="operator">=</span> <span class="number">0.1f</span>;</span><br><span class="line">    <span class="keyword">private</span> String verificationCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInterLine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> interLine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInterLine</span><span class="params">(<span class="type">int</span> interLine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.interLine = interLine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getNoiseRate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> noiseRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNoiseRate</span><span class="params">(<span class="type">float</span> noiseRate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.noiseRate = noiseRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">int</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(<span class="type">int</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getVerificationCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> verificationCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span>[] getVerificationCodeArrary() &#123;</span><br><span class="line">        <span class="keyword">return</span> verificationCodeArrary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVerificationCodeArrary</span><span class="params">(<span class="type">char</span>[] verificationCodeArrary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.verificationCodeArrary = verificationCodeArrary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span>[] verificationCodeArrary = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//饿汉单例模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">VerificationCodeUtils</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> VerificationCodeUtils verificationCodeUtils;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> VerificationCodeUtils <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (verificationCodeUtils == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (VerificationCodeUtils.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (verificationCodeUtils == <span class="literal">null</span>) &#123;</span><br><span class="line">                    verificationCodeUtils = <span class="keyword">new</span> <span class="title class_">VerificationCodeUtils</span>();</span><br><span class="line">                    <span class="keyword">return</span> verificationCodeUtils;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> verificationCodeUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;VerificationCodeUtils&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;width=&quot;</span> + width +</span><br><span class="line">                <span class="string">&quot;, height=&quot;</span> + height +</span><br><span class="line">                <span class="string">&quot;, length=&quot;</span> + length +</span><br><span class="line">                <span class="string">&quot;, interLine=&quot;</span> + interLine +</span><br><span class="line">                <span class="string">&quot;, noiseRate=&quot;</span> + noiseRate +</span><br><span class="line">                <span class="string">&quot;, verificationCode=&#x27;&quot;</span> + verificationCode + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, verificationCodeArrary=&quot;</span> + Arrays.toString(verificationCodeArrary) +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BufferedImage <span class="title function_">createVerificationCodeImage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">bufferedImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="type">Graphics</span> <span class="variable">graphics</span> <span class="operator">=</span> bufferedImage.getGraphics();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">        graphics.setColor(getRandomColor());</span><br><span class="line">        graphics.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        <span class="comment">//设置乱七八糟横线</span></span><br><span class="line">        <span class="keyword">if</span> (interLine &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; interLine; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> random.nextInt(width);</span><br><span class="line">                <span class="type">int</span> <span class="variable">y1</span> <span class="operator">=</span> random.nextInt(height);</span><br><span class="line">                <span class="type">int</span> <span class="variable">x2</span> <span class="operator">=</span> random.nextInt(width);</span><br><span class="line">                <span class="type">int</span> <span class="variable">y2</span> <span class="operator">=</span> random.nextInt(height);</span><br><span class="line">                graphics.setColor(getRandomColor());</span><br><span class="line">                graphics.drawLine(x1, y1, x2, y2);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终的验证码</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="comment">//写入验证码</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">fontsize</span> <span class="operator">=</span> (<span class="type">int</span>) (height * <span class="number">0.9</span>);</span><br><span class="line">        graphics.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(Font.SANS_SERIF, Font.BOLD, fontsize));</span><br><span class="line">        <span class="comment">//要画的字符的X坐标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">codex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">codey</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            codey = (<span class="type">int</span>) ((Math.random() * <span class="number">0.3</span> + <span class="number">0.7</span>) * height);</span><br><span class="line">            graphics.setColor(getRandomColor());</span><br><span class="line">            <span class="type">int</span> <span class="variable">anInt</span> <span class="operator">=</span> random.nextInt(verificationCodeArrary.length - <span class="number">1</span>);</span><br><span class="line">            sb.append(verificationCodeArrary[anInt]);</span><br><span class="line">            graphics.drawChars(verificationCodeArrary, anInt, <span class="number">1</span>, codex, codey);</span><br><span class="line">            codex += (width / length) * (Math.random() * <span class="number">0.3</span> + <span class="number">0.9</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入噪点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">noiseNum</span> <span class="operator">=</span> (<span class="type">int</span>) (width * height * noiseRate);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; noiseNum; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> random.nextInt(width);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> random.nextInt(height);</span><br><span class="line">            graphics.setColor(getRandomColor());</span><br><span class="line">            graphics.drawLine(x, y, x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        graphics.dispose();</span><br><span class="line">        verificationCode = sb.toString();</span><br><span class="line">        <span class="keyword">return</span> bufferedImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Color <span class="title function_">getRandomColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Color</span>(random.nextInt(<span class="number">255</span>), random.nextInt(<span class="number">255</span>), random.nextInt(<span class="number">255</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac配置</title>
    <url>/%E6%90%9E%E6%9C%BA/mac-configuration/</url>
    <content><![CDATA[<p>自用MacOS设置</p>
<span id="more"></span>

<h3 id="挂载EFI分区"><a href="#挂载EFI分区" class="headerlink" title="挂载EFI分区"></a>挂载EFI分区</h3><p><code>sudo diskutil list</code></p>
<p><code>sudo diskutil mount disk0s1</code></p>
<h3 id="系统偏好设置"><a href="#系统偏好设置" class="headerlink" title="系统偏好设置"></a>系统偏好设置</h3><ul>
<li><p>系统偏好设置</p>
<ul>
<li>网络<ul>
<li>以太网-高级-硬件-速度：1000baseT</li>
</ul>
</li>
<li>声音-在菜单栏中显示音量</li>
<li>通用<ul>
<li>显示滚动条：始终</li>
<li>在滚动条中点按：跳到点按位置</li>
</ul>
</li>
<li>程序坞<ul>
<li>放大</li>
<li>将窗口最小化为应用程序图标</li>
<li>自动隐藏<ul>
<li>defaults write com.apple.Dock autohide-delay -float 0 &amp;&amp; killall Dock   # 取消延迟</li>
<li>defaults delete com.apple.Dock autohide-delay &amp;&amp; killall Dock   #恢复延迟</li>
</ul>
</li>
</ul>
</li>
<li>调度中心<ul>
<li>触发角<ul>
<li>左上：调度中心</li>
<li>右上：应用程序窗口</li>
<li>左下：启动台</li>
<li>右下：桌面</li>
</ul>
</li>
</ul>
</li>
<li>软件中心：全部关闭</li>
<li>键盘<ul>
<li>修饰健<ul>
<li>Control键：Control</li>
<li>Option键：Option</li>
<li>Command键：Command</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>访达</p>
<ul>
<li>defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES    #顶上显示路径</li>
</ul>
</li>
</ul>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul>
<li>homebrew<ul>
<li>mos</li>
<li>Maccy</li>
<li>openjdk@11 ? AdoptOpenJDK</li>
<li>node@14</li>
<li>dbeaver-community</li>
<li>bob</li>
<li>github  (github desktop)</li>
<li>tencent-lemon</li>
<li>postman</li>
<li>another-redis-desktop-manager</li>
<li>hexo</li>
<li>iTerm2<ul>
<li>homebrew&#x2F;cask-fonts&#x2F;font-hack-nerd-font</li>
<li><a href="https://blog.biezhi.me/2018/11/build-a-beautiful-mac-terminal-environment.html">https://blog.biezhi.me/2018/11/build-a-beautiful-mac-terminal-environment.html</a></li>
</ul>
</li>
</ul>
</li>
<li>Typora</li>
<li>clash x</li>
<li>MacPass</li>
<li>Onedrive</li>
<li>IINA</li>
<li>Logitech</li>
<li>AMD Power Gadget</li>
<li>AppCleaner</li>
<li>SteelSeries ExactMouse Tool</li>
<li>AppStore<ul>
<li>CotEditor</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>小米6 Spectrum调度文件记录(过时)</title>
    <url>/%E6%90%9E%E6%9C%BA/mi6-spectrum/</url>
    <content><![CDATA[<p>小米6超频(过时)</p>
<span id="more"></span>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">		write /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq &quot;&quot;</span><br><span class="line">		write /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq &quot;&quot;</span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/scaling_min_freq &quot;&quot;</span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq &quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write /sys/devices/system/cpu/cpu0/cpufreq/schedutil/up_rate_limit_us 250             如果schedutil决定增加频率，这将检查以确保自从上一次更改频率的请求以来，至少过去了up_rate_limit_us微秒。</span><br><span class="line">write /sys/devices/system/cpu/cpu0/cpufreq/schedutil/down_rate_limit_us 10000    如果schedutil决定降低频率，这将进行检查以确保自从上次更改频率请求以来，至少过去了down_rate_limit_us微秒。</span><br><span class="line">write /sys/devices/system/cpu/cpu0/cpufreq/schedutil/iowait_boost_enable 1          用于在iowait期间将CPU提升到最大频率。通常会通过移动设备禁用它以节省电池，因此也许@ RenderBroken和我将重新考虑禁用它。</span><br><span class="line">(对于Up_rate_limit，该数字表示向上移动之前在给定频率上停留的时间。因此，这里的数字越大，它会以较低的频率杂散更长的时间，以及增加杂散的时间。</span><br><span class="line"></span><br><span class="line">对于down_rate_limit，该数字表示向下移动之前在给定频率上停留多长时间。如果您希望频率更快地降低以节省电池，那么在此较小的频率会更好。如果您想要更好的性能，则需要更大的数量。 老实说，我不会碰这些，因为它们被设置为这些值是有原因的。当前值以微秒为单位。500us表示.5ms，因此每ms表示schedutil将评估是否加速。20000us表示20毫秒，因此意味着每20毫秒schedutil将评估下降时间。电池，那么数量越少越好。如果您想要更好的性能，则需要更大的数量。</span><br><span class="line"></span><br><span class="line">请触摸它们，因为它们被设置为这些值是有原因的。当前值以微秒为单位。500us表示.5ms，因此每ms表示schedutil将评估是否加速。20000us表示20毫秒，因此意味着每20毫秒schedutil将评估下降时间。帧需要渲染才能保持60FPS的体验，即16ms。因此，在方案中，当schedutil选择频率时，只要没有任何投票，它将在给定频率下保持20ms或至少1个完整帧</span><br><span class="line"></span><br><span class="line">一个主要的考虑因素是每帧渲染以保持60FPS体验所需的时间，即16ms。因此，在方案中，当schedutil选择频率时，只要没有任何表决权，它将在给定的频率上保持20ms或至少1个全帧，然后再增加一些。这是有目的的，因为让我们考虑是否将down值设置为500us。这意味着.5ms将使schedutil在该单个帧中下降32次。为了将其视为透视图，请想象一个动画，或者说是频率很短的工作量，即频率刚被倾倒到空闲的工作中。它将滞后并且表现不佳。这也是音频播放的问题。如果我们在给定的帧中不断降低频率以保持空闲，您将变得口吃，滞后等。我希望这是有道理的。 然后还有一些。这是有目的的，因为让我们考虑是否将down值设置为500us。这意味着.5ms将使schedutil在该单个帧中下降32倍。为了将它放入角度来看，想象的动画，或任何短工作量的频率只是被倾倒到空闲中期工作。它将滞后并且表现不佳。这也是音频播放的问题。如果我们在给定的帧中不断降低频率以保持空闲，您将变得口吃，滞后等。我希望这是有道理的。)</span><br><span class="line">(For Up_rate_limit,the number means how long to stay at a given freq before moving up. So a higher number here means it will stray at lower freqs longer and how the longer it takes to ramp up.</span><br><span class="line"></span><br><span class="line">For down_rate_limit, the number means how long to stay at a given freq before moving down. If you would like the freqs to ramp down more quickly to save battery, then a smaller number would be better here. If you want better performance, a larger number is needed.battery, then a smaller number would be better here. If you want better performance, a larger number is needed.</span><br><span class="line"></span><br><span class="line">Honestly, I would NOT touch these as they are set to these values for a reason. Currently the values are in micro seconds. 500us means .5ms so every ms means schedutil will evaluate whether or not to ramp up. 20000us means 20ms so that means every 20ms, schedutil will evaluate ramping down. touch these as they are set to these values for a reason. Currently the values are in micro seconds. 500us means .5ms so every ms means schedutil will evaluate whether or not to ramp up. 20000us means 20ms so that means every 20ms, schedutil will evaluate ramping down.</span><br><span class="line"></span><br><span class="line">A major consideration is how long each frame takes to render to keep a 60FPS experience and that is 16ms. So in the scheme of things, when schedutil selects a freq, as long as there are not any up votes, it will stay at that given freq for 20ms or at least 1 full frame and then some. This is on purpose as lets consider if we had the down value set to 500us. This means .5ms would make schedutil ramp down 32 times in that single frame. To put that into perspective, imagine an animation, or any short workload that the freq just gets dumped down to idle mid-work. It would lag and not perform very well. This is also a problem with audio playback. If we keep dropping the freq to idle over and over in a given frame, you will get stuttering, lag, etc. I hope this makes sense. frame takes to render to keep a 60FPS experience and that is 16ms. So in the scheme of things, when schedutil selects a freq, as long as there are not any up votes, it will stay at that given freq for 20ms or at least 1 full frame and then some. This is on purpose as lets consider if we had the down value set to 500us. This means .5ms would make schedutil ramp down 32 times in that single frame. To put that into perspective, imagine an animation, or any short workload that the freq just gets dumped down to idle mid-work. It would lag and not perform very well. This is also a problem with audio playback. If we keep dropping the freq to idle over and over in a given frame, you will get stuttering, lag, etc. I hope this makes sense.)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write /sys/module/sync/parameters/fsync_enabled N         关掉提高文件读写，提高出错几率</span><br><span class="line">write /sys/module/msm_thermal/core_control/enabled 0  核心温控</span><br><span class="line">write /sys/module/msm_thermal/parameters/enabled N   温控</span><br><span class="line">write /sys/module/cpu_input_boost/parameters/input_boost_freq_lp &quot;748800&quot;  提升小的频率集群</span><br><span class="line">write /sys/module/cpu_input_boost/parameters/input_boost_freq_hp &quot;902000&quot; 提升大簇的频率</span><br><span class="line">write /sys/module/cpu_input_boost/parameters/input_boost_duration &quot;64&quot;        提升频率持续时间</span><br><span class="line"></span><br><span class="line">*.prefer_idle</span><br><span class="line">这是一个标志，向调度程序指示用户空间想要</span><br><span class="line">调度程序专注于能源或性能。</span><br><span class="line">值0（默认值）会向CFS调度程序发出信号，指示该组中的任务</span><br><span class="line">可以根据能量感知唤醒策略放置。</span><br><span class="line">值为1会向CFS调度程序发出信号，表明该组中的任务应为</span><br><span class="line">放置以最小化唤醒延迟。</span><br><span class="line">Android平台通常将此标志用于应用程序任务，</span><br><span class="line">用户当前正在与之交互。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write /sys/class/kgsl/kgsl-3d0/default_pwrlevel 5</span><br><span class="line">write /sys/class/kgsl/kgsl-3d0/max_pwrlevel 0</span><br><span class="line">write /sys/class/kgsl/kgsl-3d0/min_pwrlevel 7</span><br><span class="line">0-7  0性能最强,7最弱</span><br><span class="line">write /sys/class/kgsl/kgsl-3d0/devfreq/adrenoboost 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write /dev/stune/background/schedtune.boost 100</span><br><span class="line">write /dev/stune/foreground/schedtune.boost 100</span><br><span class="line">write /dev/stune/top-app/schedtune.boost 100</span><br><span class="line">这允许将提升值表示为<span class="section">[0..100]</span>范围内的整数。</span><br><span class="line">值0（默认值）将CFS调度程序配置为最大能量</span><br><span class="line">效率。这意味着sched-DVFS以最低OPP运行任务</span><br><span class="line">需要满足他们的工作量需求。</span><br><span class="line">值为100时，将配置调度程序以实现最高性能，即</span><br><span class="line">选择该CPU上的最大OPP。</span><br><span class="line">可以设置0到100之间的范围以适合其他情况。对于</span><br><span class="line">满足交互式响应或取决于其他系统事件的示例</span><br><span class="line">（电池电量等）。</span><br><span class="line">您可以应用0到100的值。</span><br><span class="line">将其设置为100时，设备将在所有核心最大化的情况下持续运行出来。</span><br><span class="line">我发现2到10的值具有最有效的效果。</span><br><span class="line">我当前使用的是8的提升值。电池寿命仍然很棒。但是，天哪，该设备现在运行得多么流畅。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_boost_freq_lp 748800</span><br></pre></td></tr></table></figure>

<p>我修改的</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nnn 小米6 内核调度</span></span><br><span class="line"><span class="comment"># Date:20200222-test1</span></span><br><span class="line">on property:<span class="attr">sys.boot_completed</span>=<span class="number">1</span></span><br><span class="line">exec u:r:init:s0 -- /init.spectrum.sh exec u:r:su:s0 root root -- /init.spectrum.sh</span><br><span class="line">exec u:r:magisk:s0 root root -- /init.spectrum.sh</span><br><span class="line">exec u:r:supersu:s0 root root -- /init.spectrum.sh</span><br><span class="line">setprop spectrum.support 1</span><br><span class="line">setprop persist.spectrum.kernel stickernel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均衡模式</span></span><br><span class="line">on property:<span class="attr">persist.spectrum.profile</span>=<span class="number">0</span></span><br><span class="line">    <span class="comment">#0</span></span><br><span class="line">	    write /sys/devices/system/cpu/cpu0/online 1</span><br><span class="line">		write /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor &quot;schedutil&quot;</span><br><span class="line">		write /sys/devices/system/cpu/cpu0/cpufreq/schedutil/up_rate_limit_us 250</span><br><span class="line">		write /sys/devices/system/cpu/cpu0/cpufreq/schedutil/down_rate_limit_us 500</span><br><span class="line">		write /sys/devices/system/cpu/cpu0/cpufreq/schedutil/iowait_boost_enable 0</span><br><span class="line">	    write /sys/devices/system/cpu/cpu4/online 1 </span><br><span class="line">		write /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq &quot;1401000&quot;</span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq &quot;1497000&quot;</span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor &quot;schedutil&quot;</span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/schedutil/up_rate_limit_us 250</span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/schedutil/down_rate_limit_us 500</span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/schedutil/iowait_boost_enable 0</span><br><span class="line">		write /dev/stune/background/schedtune.boost 2</span><br><span class="line">		write /dev/stune/foreground/schedtune.boost 4</span><br><span class="line">		write /dev/stune/top-app/schedtune.boost 8</span><br><span class="line">		write /dev/stune/background/schedtune.prefer_idle 0</span><br><span class="line">		write /dev/stune/foreground/schedtune.prefer_idle 0</span><br><span class="line">		write /dev/stune/top-app/schedtune.prefer_idle 1</span><br><span class="line">		write /dev/stune/rt/schedtune.prefer_idle 0</span><br><span class="line">		write /dev/stune/schedtune.prefer_idle 1</span><br><span class="line">		write /dev/stune/schedtune.boost 1</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/default_pwrlevel 6</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/max_pwrlevel 2</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/min_pwrlevel 7</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/devfreq/adrenoboost 0</span><br><span class="line">		write /dev/stune/top-app/schedtune.boost 8</span><br><span class="line">		write /dev/stune/top-app/schedtune.sched_boost 8</span><br><span class="line">		write /sys/module/sync/parameters/fsync_enabled N</span><br><span class="line">		write /sys/module/cpu_input_boost/parameters/input_boost_freq_lp &quot;1248000&quot;</span><br><span class="line">		write /sys/module/cpu_input_boost/parameters/input_boost_freq_hp &quot;1132800&quot;</span><br><span class="line">		write /sys/module/cpu_input_boost/parameters/input_boost_duration &quot;1000&quot;</span><br><span class="line">		write /sys/module/msm_thermal/parameters/enabled N</span><br><span class="line">		write /sys/module/msm_thermal/core_control/enabled 1</span><br><span class="line">		write /dev/cpuset/top-app/cpus 0-7</span><br><span class="line">		write /dev/cpuset/foreground/cpus 0-3</span><br><span class="line">		write /dev/cpuset/background/cpus 0-3</span><br><span class="line">		write /dev/cpuset/system-background/cpus 0-3</span><br><span class="line">		write /dev/cpuset/restricted/cpus 0-3</span><br><span class="line">		write /dev/cpuset/audio-app/cpus 0-3</span><br><span class="line">		<span class="comment">#write /dev/cpuset/vr/cpus 0-3</span></span><br><span class="line">		<span class="comment">#write /dev/cpuset/gamelite/cpus 0-7</span></span><br><span class="line">		write /dev/cpuset/camera-daemon/cpus 0-5</span><br><span class="line"><span class="comment">#end Stickernel</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 性能模式</span></span><br><span class="line">on property:<span class="attr">persist.spectrum.profile</span>=<span class="number">1</span></span><br><span class="line">    <span class="comment">#1</span></span><br><span class="line">	    write /sys/devices/system/cpu/cpu0/online 1</span><br><span class="line">		write /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor &quot;performance&quot;</span><br><span class="line">	    write /sys/devices/system/cpu/cpu4/online 1 </span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq &quot;2457600&quot;</span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor &quot;performance&quot;</span><br><span class="line">		write /dev/stune/background/schedtune.boost 100</span><br><span class="line">		write /dev/stune/foreground/schedtune.boost 100</span><br><span class="line">		write /dev/stune/top-app/schedtune.boost 100</span><br><span class="line">		write /dev/stune/background/schedtune.prefer_idle 1</span><br><span class="line">		write /dev/stune/foreground/schedtune.prefer_idle 1</span><br><span class="line">		write /dev/stune/top-app/schedtune.prefer_idle 1</span><br><span class="line">		write /dev/stune/rt/schedtune.prefer_idle 1</span><br><span class="line">		write /dev/stune/schedtune.prefer_idle 1</span><br><span class="line">		write /dev/stune/schedtune.boost 1</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/default_pwrlevel 0</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/max_pwrlevel 0</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/min_pwrlevel 0</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/devfreq/adrenoboost 3</span><br><span class="line">		write /dev/stune/top-app/schedtune.sched_boost 100</span><br><span class="line">		write /sys/module/sync/parameters/fsync_enabled N</span><br><span class="line">		write /sys/module/cpu_input_boost/parameters/input_boost_freq_lp &quot;1900800&quot;</span><br><span class="line">		write /sys/module/cpu_input_boost/parameters/input_boost_freq_hp &quot;2457600&quot;</span><br><span class="line">		write /sys/module/cpu_input_boost/parameters/input_boost_duration &quot;3000&quot;</span><br><span class="line">		write /sys/module/msm_thermal/parameters/enabled N</span><br><span class="line">		write /sys/module/msm_thermal/core_control/enabled 0</span><br><span class="line"><span class="comment">#end Stickernel</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 省电模式</span></span><br><span class="line">on property:<span class="attr">persist.spectrum.profile</span>=<span class="number">2</span></span><br><span class="line">    <span class="comment">#2</span></span><br><span class="line">	    write /sys/devices/system/cpu/cpu0/online 1</span><br><span class="line">		write /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor &quot;ondemand&quot;</span><br><span class="line">	    write /sys/devices/system/cpu/cpu4/online 1 </span><br><span class="line">		write /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq &quot;1401000&quot;</span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq &quot;1344400&quot;</span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor &quot;ondemand&quot;</span><br><span class="line">		write /dev/stune/background/schedtune.boost 0</span><br><span class="line">		write /dev/stune/foreground/schedtune.boost 0</span><br><span class="line">		write /dev/stune/top-app/schedtune.boost 1</span><br><span class="line">		write /dev/stune/background/schedtune.prefer_idle 0</span><br><span class="line">		write /dev/stune/foreground/schedtune.prefer_idle 0</span><br><span class="line">		write /dev/stune/top-app/schedtune.prefer_idle 1</span><br><span class="line">		write /dev/stune/rt/schedtune.prefer_idle 0</span><br><span class="line">		write /dev/stune/schedtune.prefer_idle 0</span><br><span class="line">		write /dev/stune/schedtune.boost 0</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/devfreq/adrenoboost 0</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/default_pwrlevel 7</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/max_pwrlevel 4</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/min_pwrlevel 7</span><br><span class="line">		write /dev/stune/top-app/schedtune.sched_boost 1</span><br><span class="line">		write /sys/module/sync/parameters/fsync_enabled Y</span><br><span class="line">		write /sys/module/cpu_input_boost/parameters/input_boost_freq_lp &quot;1248000&quot;</span><br><span class="line">		write /sys/module/cpu_input_boost/parameters/input_boost_freq_hp &quot;1132800&quot;</span><br><span class="line">		write /sys/module/cpu_input_boost/parameters/input_boost_duration &quot;1000&quot;</span><br><span class="line">		write /sys/module/msm_thermal/parameters/enabled N</span><br><span class="line">		write /sys/module/msm_thermal/core_control/enabled 1</span><br><span class="line">		write /dev/cpuset/top-app/cpus 0-7</span><br><span class="line">		write /dev/cpuset/foreground/cpus 0-3</span><br><span class="line">		write /dev/cpuset/background/cpus 0-1</span><br><span class="line">		write /dev/cpuset/system-background/cpus 0-2</span><br><span class="line">		write /dev/cpuset/restricted/cpus 0-1</span><br><span class="line">		write /dev/cpuset/audio-app/cpus 0-3</span><br><span class="line">		<span class="comment">#write /dev/cpuset/vr/cpus 0-3</span></span><br><span class="line">		<span class="comment">#write /dev/cpuset/gamelite/cpus 0-7</span></span><br><span class="line">		write /dev/cpuset/camera-daemon/cpus 0-5</span><br><span class="line"><span class="comment">#end Stickernel</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 游戏模式</span></span><br><span class="line">on property:<span class="attr">persist.spectrum.profile</span>=<span class="number">3</span></span><br><span class="line">    <span class="comment">#3</span></span><br><span class="line">	    write /sys/devices/system/cpu/cpu0/online 1</span><br><span class="line">		write /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor &quot;schedutil&quot;</span><br><span class="line">		write /sys/devices/system/cpu/cpu0/cpufreq/schedutil/up_rate_limit_us 250</span><br><span class="line">		write /sys/devices/system/cpu/cpu0/cpufreq/schedutil/down_rate_limit_us 20000</span><br><span class="line">		write /sys/devices/system/cpu/cpu0/cpufreq/schedutil/iowait_boost_enable 1</span><br><span class="line">	    write /sys/devices/system/cpu/cpu4/online 1 </span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq &quot;2457600&quot;</span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor &quot;schedutil&quot;</span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/schedutil/up_rate_limit_us 250</span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/schedutil/down_rate_limit_us 20000</span><br><span class="line">		write /sys/devices/system/cpu/cpu4/cpufreq/schedutil/iowait_boost_enable 1</span><br><span class="line">		write /dev/stune/background/schedtune.boost 2</span><br><span class="line">		write /dev/stune/foreground/schedtune.boost 2</span><br><span class="line">		write /dev/stune/top-app/schedtune.boost 100</span><br><span class="line">		write /dev/stune/background/schedtune.prefer_idle 0</span><br><span class="line">		write /dev/stune/foreground/schedtune.prefer_idle 1</span><br><span class="line">		write /dev/stune/top-app/schedtune.prefer_idle 1</span><br><span class="line">		write /dev/stune/rt/schedtune.prefer_idle 1</span><br><span class="line">		write /dev/stune/schedtune.prefer_idle 1</span><br><span class="line">		write /dev/stune/schedtune.boost 1</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/default_pwrlevel 1</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/max_pwrlevel 0</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/min_pwrlevel 7</span><br><span class="line">		write /sys/class/kgsl/kgsl-3d0/devfreq/adrenoboost 2</span><br><span class="line">		write /dev/stune/top-app/schedtune.sched_boost 100</span><br><span class="line">		write /sys/module/sync/parameters/fsync_enabled N</span><br><span class="line">		write /sys/module/cpu_input_boost/parameters/input_boost_freq_lp &quot;1401600&quot;</span><br><span class="line">		write /sys/module/cpu_input_boost/parameters/input_boost_freq_hp &quot;1804800&quot;</span><br><span class="line">		write /sys/module/cpu_input_boost/parameters/input_boost_duration &quot;2800&quot;</span><br><span class="line">		write /sys/module/msm_thermal/parameters/enabled N</span><br><span class="line">		write /sys/module/msm_thermal/core_control/enabled 0</span><br><span class="line">		write /dev/cpuset/top-app/cpus 0-7</span><br><span class="line">		write /dev/cpuset/foreground/cpus 0-7</span><br><span class="line">		write /dev/cpuset/background/cpus 0-3</span><br><span class="line">		write /dev/cpuset/system-background/cpus 0-3</span><br><span class="line">		write /dev/cpuset/restricted/cpus 0-3</span><br><span class="line">		write /dev/cpuset/audio-app/cpus 0-3</span><br><span class="line">		<span class="comment">#write /dev/cpuset/vr/cpus 0-3</span></span><br><span class="line">		<span class="comment">#write /dev/cpuset/gamelite/cpus 0-7</span></span><br><span class="line">		write /dev/cpuset/camera-daemon/cpus 0-7</span><br><span class="line">		write /sys/module/msm_performance/parameters/touchboost 1</span><br><span class="line"><span class="comment">#end Stickernel</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>Mi6</tag>
      </tags>
  </entry>
  <entry>
    <title>N1配置</title>
    <url>/%E6%90%9E%E6%9C%BA/n1-configuration/</url>
    <content><![CDATA[<p>N1配置</p>
<span id="more"></span>

<h1 id="Armbian"><a href="#Armbian" class="headerlink" title="Armbian"></a>Armbian</h1><h2 id="救砖"><a href="#救砖" class="headerlink" title="救砖"></a>救砖</h2><ol>
<li><p>加载W大2.2镜像，取消勾选擦除Flash和擦除Bootloader</p>
</li>
<li><p>点击开始，先连接USB电脑到N1的HDMI旁的USB口</p>
</li>
<li><p>短接触点，插电开机开始刷机</p>
</li>
<li><p>1%卡住，停止刷机</p>
</li>
<li><p>加载T1镜像，license文件夹和key放到刷机工具根目录</p>
</li>
<li><p>勾选擦除Flash和Bootloader，开始刷机</p>
</li>
<li><p>2% 4%卡住可以停止然后重新插上USB线换USB口重试刷机</p>
</li>
<li><p>若一直失败就换台电脑，最好是intel</p>
</li>
<li><p>刷T1镜像超过20%以上失败后，停止刷机</p>
</li>
<li><p>加载W大镜像，取消勾选，继续刷机</p>
</li>
<li><p>若刷不进W大镜像，就刷官方固件</p>
<p><a href="https://www.bilibili.com/video/BV19J411c7Zf?p=1&t=10&spm_id_from=..0.0">B站救砖视频</a></p>
<p>固件：<a href="https://pan.baidu.com/s/1kbvtyxpcmniLKN_ziH-kqQ">百度网盘</a> 提取码：jla9</p>
</li>
</ol>
<h2 id="刷入系统"><a href="#刷入系统" class="headerlink" title="刷入系统"></a>刷入系统</h2><ol>
<li><p>官方固件一直点击版本号可以开启adb</p>
</li>
<li><p>n1联网</p>
</li>
<li><p>电脑powershell连接adb <code>adb connect 192.168.2.221</code></p>
</li>
<li><p>继续<code>adb shell</code> 进入adb</p>
</li>
<li><p>输入<code>reboot update</code> 后立马把U盘插入n1</p>
</li>
<li><p>进入linux</p>
</li>
</ol>
<p>刷入5.9.16-flippy-51+<br>插网线<br>设置语言，编码，更新源</p>
<h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>运行&#x2F;root目录下的安装docker脚本<br>更改docker国内镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://2wfkcpg0.mirror.aliyuncs.com&quot;</span>,<span class="string">&quot;https://dockerhub.azk8s.cn&quot;</span>,<span class="string">&quot;https://reg-mirror.qiniu.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="安装dockerui"><a href="#安装dockerui" class="headerlink" title="安装dockerui"></a>安装dockerui</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line"><span class="comment">#docker pull portainer/portainer-ce</span></span><br><span class="line">docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce</span><br></pre></td></tr></table></figure>

<h3 id="安装mysql8"><a href="#安装mysql8" class="headerlink" title="安装mysql8"></a>安装mysql8</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mysql/mysql-server</span><br><span class="line">docker run --name=mysql8 --restart=always -p 3306:3306 -d mysql/mysql-server</span><br><span class="line"><span class="comment">#使用以下命令监视容器的输出：</span></span><br><span class="line">docker logs mysql8</span><br><span class="line"><span class="comment">#初始化完成后，命令的输出将包含为root用户生成的随机密码。使用以下命令检查密码(若没出现密码再输一次)：</span></span><br><span class="line">docker logs mysql8 2&gt;&amp;1 | grep GENERATED</span><br><span class="line"><span class="comment">#从容器内连接到MySQL Server</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql8 mysql -uroot -p</span><br><span class="line"><span class="comment">#第一次登录要修改root密码</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;passowrd&#x27;</span>;</span><br><span class="line"><span class="comment">#root远程登录</span></span><br><span class="line">update user <span class="built_in">set</span> host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment">#退出bash</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h3 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull redis:latest</span><br><span class="line">docker run -itd --name redis --restart=always -p 6379:6379 redis:latest</span><br><span class="line"><span class="comment">#清空数据</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis FLUSHALL</span><br><span class="line"><span class="comment">#进入终端</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="安装qiandao"><a href="#安装qiandao" class="headerlink" title="安装qiandao"></a>安装qiandao</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name qiandao --restart=always -p 8923:80 -v $(<span class="built_in">pwd</span>)/qiandao/config:/usr/src/app/config a76yyyy/qiandao:lite-latest</span><br></pre></td></tr></table></figure>

<h3 id="安装qinglong"><a href="#安装qinglong" class="headerlink" title="安装qinglong"></a>安装qinglong</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">  -v <span class="variable">$PWD</span>/ql:/ql/data \</span><br><span class="line">  -p 5700:5700 \</span><br><span class="line">  --name qinglong \</span><br><span class="line">  --hostname qinglong \</span><br><span class="line">  --restart always \</span><br><span class="line">  whyour/qinglong:latest</span><br></pre></td></tr></table></figure>

<h3 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always -p 27017:27017 --name mongoDb -v /root/db:/data/db -d mongo:4.4.15</span><br></pre></td></tr></table></figure>



<h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull zookeeper</span><br><span class="line">docker run --name zookeeper -p 2181:2181 --restart always -d zookeeper</span><br></pre></td></tr></table></figure>

<h3 id="安装rabbitmq"><a href="#安装rabbitmq" class="headerlink" title="安装rabbitmq"></a>安装rabbitmq</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --<span class="built_in">rm</span> --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management</span><br><span class="line"></span><br><span class="line">rabbitmqctl add_user admin admin</span><br><span class="line">rabbitmqctl set_permissions -p / admin <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure>

<h3 id="安装微软E5ReNew"><a href="#安装微软E5ReNew" class="headerlink" title="安装微软E5ReNew"></a>安装微软E5ReNew</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 1066:1066 -e TZ=Asia/Shanghai --name E5ReNew hanhongyong/ms365-e5-renew-x:arm</span><br><span class="line">docker <span class="built_in">exec</span> -it E5ReNew /bin/bash</span><br><span class="line"><span class="comment">#默认密码：123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个库</span></span><br><span class="line">docker run -d \</span><br><span class="line">    -p 1066:1066 \</span><br><span class="line">    -v <span class="variable">$PWD</span>/Deploy:/renewx/Deploy \</span><br><span class="line">    -v <span class="variable">$PWD</span>/appdata:/renewx/appdata \</span><br><span class="line">    --name E5ReNew \</span><br><span class="line">    --restart always \</span><br><span class="line">gladtbam/ms365_e5_renewx:latest</span><br></pre></td></tr></table></figure>



<h3 id="安装subconverter"><a href="#安装subconverter" class="headerlink" title="安装subconverter"></a>安装subconverter</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull tindy2013/subconverter</span><br><span class="line">docker run -d --name subconverter --restart=always -p 25500:25500 tindy2013/subconverter</span><br><span class="line"><span class="built_in">cd</span> Deploy</span><br><span class="line">vim Config.xml</span><br></pre></td></tr></table></figure>

<p>ax6 shellclash 规则地址:</p>
<p><a href="http://192.168.2.11:25500/sub?target=clash&url=http://192.168.2.11:8887/clash/proxies?speed=10,500&config=https://gist.githubusercontent.com/nnn149/7b2a27395d6228163b17dba43d076c36/raw/29ce43930c0d6fb0b14ab33bda3f2e8ada0e4054/nnn-ACL4SSR">http://192.168.2.11:25500/sub?target=clash&amp;url=http%3a%2f%2f192.168.2.11%3a8887%2fclash%2fproxies%3fspeed%3d10%2c500&amp;config=https%3A%2F%2Fgist.githubusercontent.com%2Fnnn149%2F7b2a27395d6228163b17dba43d076c36%2Fraw%2F29ce43930c0d6fb0b14ab33bda3f2e8ada0e4054%2Fnnn-ACL4SSR</a></p>
<h3 id="安装netdata"><a href="#安装netdata" class="headerlink" title="安装netdata"></a>安装netdata</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull netdata/netdata</span><br><span class="line">docker run -d --name=netdata \</span><br><span class="line">  -p 19999:19999 \</span><br><span class="line">  -v netdataconfig:/etc/netdata \</span><br><span class="line">  -v netdatalib:/var/lib/netdata \</span><br><span class="line">  -v netdatacache:/var/cache/netdata \</span><br><span class="line">  -v /etc/passwd:/host/etc/passwd:ro \</span><br><span class="line">  -v /etc/group:/host/etc/group:ro \</span><br><span class="line">  -v /proc:/host/proc:ro \</span><br><span class="line">  -v /sys:/host/sys:ro \</span><br><span class="line">  -v /etc/os-release:/host/etc/os-release:ro \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  --cap-add SYS_PTRACE \</span><br><span class="line">  --security-opt apparmor=unconfined \</span><br><span class="line">  netdata/netdata</span><br></pre></td></tr></table></figure>

<h3 id="安装adguardhome"><a href="#安装adguardhome" class="headerlink" title="安装adguardhome"></a>安装adguardhome</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull adguard/adguardhome</span><br><span class="line">docker run --name adguardhome \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -v :/opt/adguardhome/work \</span><br><span class="line">    -v /root/adguard/confdir:/opt/adguardhome/conf \</span><br><span class="line">    -p 53:53/tcp -p 53:53/udp \</span><br><span class="line">    -p 80:80/tcp -p 3000:3000/tcp \</span><br><span class="line">    -p 443:443/tcp \</span><br><span class="line">    -p 853:853/tcp \</span><br><span class="line">    -d adguard/adguardhome</span><br></pre></td></tr></table></figure>

<p>dns设置</p>
<p>tcp:&#x2F;&#x2F;58.22.96.66<br>tcp:&#x2F;&#x2F;218.104.128.106<br>tcp:&#x2F;&#x2F;114.114.114.114</p>
<p>filter规则</p>
<p><a href="https://github.com/Hackl0us/AdBlock-Rules-Mirror">https://github.com/Hackl0us/AdBlock-Rules-Mirror</a></p>
<h3 id="安装kms"><a href="#安装kms" class="headerlink" title="安装kms"></a>安装kms</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull teddysun/kms</span><br><span class="line">docker run -d -p 1688:1688 --name kms --restart=always teddysun/kms</span><br></pre></td></tr></table></figure>

<h2 id="OMV安装"><a href="#OMV安装" class="headerlink" title="OMV安装"></a>OMV安装</h2><p>科学上网或设置 raw github host;<br>参考这个安装omv<br><a href="https://github.com/OpenMediaVault-Plugin-Developers/docs/blob/master/Adden-A-Installing_OMV5_on_Armbian.pdf">https://github.com/OpenMediaVault-Plugin-Developers/docs/blob/master/Adden-A-Installing_OMV5_on_Armbian.pdf</a><br>运行ovm什么start ,初始化网卡，插网线  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#由于network被omv删除了，每次重启都很慢，所以要干掉校验的一个service。</span></span><br><span class="line">vim /lib/systemd/system/systemd-networkd-wait-online.service</span><br><span class="line"><span class="comment"># 找到ExecStart那行，将其替换为ExecStart=echo &#x27;1&#x27;，然后 :wq! 退出编辑文本模式</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<p>可以在omv的网络里面设置静态ip和dns,导入ssl证书，开启https<br>可以安装Cockpit,直接在omv-Extras里面装</p>
<h2 id="组RAID"><a href="#组RAID" class="headerlink" title="组RAID"></a>组RAID</h2><p><a href="https://yaozhijin.gitee.io/linux%E4%B8%8B%E4%BD%BF%E7%94%A8mdadm%E7%BB%84%E8%BD%AFraid.html">https://yaozhijin.gitee.io/linux%E4%B8%8B%E4%BD%BF%E7%94%A8mdadm%E7%BB%84%E8%BD%AFraid.html</a><br><a href="https://www.bilibili.com/video/BV1P4411D7K7">https://www.bilibili.com/video/BV1P4411D7K7</a><br><a href="https://blog.csdn.net/weixin_43515220/article/details/102874410">https://blog.csdn.net/weixin_43515220/article/details/102874410</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mdadm -C /dev/md0 -a <span class="built_in">yes</span> -l 1 -n 2 /dev/sda1 /dev/sdb1</span><br><span class="line"><span class="comment"># 格式化</span></span><br><span class="line">sudo mkfs.ext4 /dev/md0</span><br><span class="line"><span class="comment"># 写入配置文件</span></span><br><span class="line">sudo mdadm -Ds /dev/md0 &gt; mdadm.conf</span><br><span class="line">sudo <span class="built_in">mv</span> mdadm.conf /etc/</span><br><span class="line"><span class="comment">#挂载 也可在OMV里面挂载</span></span><br><span class="line"><span class="built_in">mkdir</span> /raid1</span><br><span class="line">mount /dev/md0 /raid1</span><br><span class="line"><span class="comment">#永久挂载</span></span><br><span class="line">vim /etc/fstab</span><br><span class="line">UUID=77d1b97b-0681-49e7-99d6-3f51fde77308 /raid1 ext4 deafults 0 2</span><br></pre></td></tr></table></figure>

<h2 id="kodbox有道云"><a href="#kodbox有道云" class="headerlink" title="kodbox有道云"></a>kodbox有道云</h2><p><a href="https://hub.docker.com/r/kodcloud/kodbox/tags?page=1&ordering=last_updated">https://hub.docker.com/r/kodcloud/kodbox/tags?page=1&amp;ordering=last_updated</a><br><a href="http://doc.kodcloud.com/v2/#/start">http://doc.kodcloud.com/v2/#/start</a></p>
<p>拉取镜像 <code>docker pull kodcloud/kodbox:v1.15</code></p>
<p>创建mysql用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE kodbox;  </span><br><span class="line">CREATE USER &#x27;kodbox&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line">GRANT ALL ON kodbox.* TO &#x27;kodbox&#x27;@&#x27;%&#x27;;</span><br><span class="line">FLUSH PRIVILEGES; </span><br></pre></td></tr></table></figure>

<p>启动docker</p>
<p><code>docker run -d -p 8666:80 --name=kodbox --restart=always -v /srv/dev-disk-by-uuid-77d1b97b-0681-49e7-99d6-3f51fde77308/kodbox:/var/www/html kodcloud/kodbox:v1.15</code></p>
<p>mysql和redis的ip填写docker里分别对应的ip<br>若要配置https: 下载腾讯云证书，解压nginx的证书,crt改名fullchain.pem,key改名privkey.pem</p>
<h2 id="docker-openwrt"><a href="#docker-openwrt" class="headerlink" title="docker-openwrt"></a>docker-openwrt</h2><p><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=1905062&extra=page=6&filter=typeid&typeid=21">https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=1905062&amp;extra=page%3D6%26filter%3Dtypeid%26typeid%3D21</a></p>
<p>上传docker镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker import /tmp/openwrt-armvirt-64-default-rootfs.tar.gz openwrt:acc</span><br><span class="line">docker network create -d macvlan --subnet=192.168.2.0/24 --gateway=192.168.2.1 -o parent=eth0 macnet</span><br><span class="line"><span class="comment">#查看已创建了哪些</span></span><br><span class="line">docker network <span class="built_in">ls</span> </span><br><span class="line"></span><br><span class="line">docker run --restart always -d --network macnet --privileged --name openwrt openwrt:acc /sbin/init</span><br><span class="line"></span><br><span class="line"><span class="comment">#f大版本</span></span><br><span class="line">docker pull unifreq/openwrt-aarch64:latest</span><br><span class="line">docker run --restart always -d --network macnet --privileged --name openwrt unifreq/openwrt-aarch64:latest /sbin/init</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入openwrt容器修改network设置</span></span><br><span class="line">docker <span class="built_in">exec</span> -it openwrt /bin/bash</span><br><span class="line">vi /etc/config/network</span><br><span class="line"><span class="comment">#    option ipaddr &#x27;192.168.2.11&#x27;</span></span><br><span class="line"><span class="comment">#    option gateway &#x27;192.168.2.1&#x27;</span></span><br><span class="line"><span class="comment">#    option dns &#x27;192.168.2.1&#x27;</span></span><br><span class="line">reboot</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>访问 192.168.2.11，禁止dhcp，ipv6，取消桥接？</p>
<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>接管OMV的nginx生成的配置</p>
<p>注释<code>/etc/nginx/nginx.conf</code> 里面的 <code> include /etc/nginx/sites-enabled/*;</code><br>拷贝  <code>/etc/nginx/sites-enabled/openmediavault-webgui</code>  到  <code>/etc/nginx/conf.d/openmediavault-webgui.conf</code></p>
<p>cockpit需要添加一条按这个配置的location </p>
<p><a href="https://github.com/cockpit-project/cockpit/wiki/Proxying-Cockpit-over-nginx">https://github.com/cockpit-project/cockpit/wiki/Proxying-Cockpit-over-nginx</a><br>可以配置kodbox为另一个域名访问  </p>
<p>完整conf如下:  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> nas.nicenan.cn;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">      <span class="attribute">if</span> (<span class="variable">$scheme</span> = http) &#123;</span><br><span class="line">          <span class="comment"># Force redirection to HTTPS.</span></span><br><span class="line">          <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span>:443<span class="variable">$request_uri</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/certificate/1_nas.nicenan.cn_bundle.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/certificate/2_nas.nicenan.cn.key;</span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/kodbox_error.log <span class="literal">error</span>;</span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/kodbox_access.log combined;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">500M</span>;</span><br><span class="line">    <span class="attribute">client_header_timeout</span> <span class="number">3600s</span>;</span><br><span class="line">    <span class="attribute">client_body_timeout</span> <span class="number">3600s</span>;</span><br><span class="line">    <span class="attribute">fastcgi_connect_timeout</span> <span class="number">3600s</span>;</span><br><span class="line">    <span class="attribute">fastcgi_send_timeout</span> <span class="number">3600s</span>;</span><br><span class="line">    <span class="attribute">fastcgi_read_timeout</span> <span class="number">3600s</span>;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="comment"># Required to proxy the connection to Cockpit</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8666;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Required for web sockets to function</span></span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Pass ETag header from Cockpit to clients.</span></span><br><span class="line">        <span class="comment"># See: https://github.com/cockpit-project/cockpit/issues/5239</span></span><br><span class="line">        <span class="attribute">gzip</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> n1.nicenan.cn;</span><br><span class="line">    <span class="attribute">root</span> /var/www/openmediavault;</span><br><span class="line">    <span class="attribute">index</span> index.php;</span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">25M</span>;</span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/openmediavault-webgui_error.log <span class="literal">error</span>;</span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/openmediavault-webgui_access.log combined;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span> = /<span class="number">404</span>.php;</span><br><span class="line">    <span class="section">location</span> /cockpit/ &#123;</span><br><span class="line">        <span class="comment"># Required to proxy the connection to Cockpit</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> https://127.0.0.1:9090/cockpit/;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Required for web sockets to function</span></span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Pass ETag header from Cockpit to clients.</span></span><br><span class="line">        <span class="comment"># See: https://github.com/cockpit-project/cockpit/issues/5239</span></span><br><span class="line">        <span class="attribute">gzip</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /<span class="number">404</span>.html &#123;</span><br><span class="line">        internal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /extjs6/ &#123;</span><br><span class="line">        <span class="attribute">alias</span> /usr/share/javascript/extjs6/;</span><br><span class="line">        <span class="attribute">expires</span> <span class="number">2d</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^/(css|js|images)/</span> &#123;</span><br><span class="line">        <span class="attribute">expires</span> <span class="number">2d</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /favicon &#123;</span><br><span class="line">        <span class="attribute">expires</span> <span class="number">14d</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> =<span class="number">404</span>;</span><br><span class="line">        <span class="attribute">fastcgi_split_path_info</span><span class="regexp"> ^(.+\.php)(/.+)$</span>;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/run/php/php7.3-fpm-openmediavault-webgui.sock;</span><br><span class="line">        <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">        <span class="attribute">fastcgi_read_timeout</span> <span class="number">60s</span>;</span><br><span class="line">        <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> PHP_ADMIN_VALUE session.cookie_secure=On;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span> default_server ipv6only=<span class="literal">on</span>;</span><br><span class="line">      <span class="attribute">if</span> (<span class="variable">$scheme</span> = http) &#123;</span><br><span class="line">          <span class="comment"># Force redirection to HTTPS.</span></span><br><span class="line">          <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span>:443<span class="variable">$request_uri</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> default_server ipv6only=<span class="literal">on</span> ssl deferred;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/ssl/certs/openmediavault-70b9aedb-7a5f-<span class="number">4286</span>-b53f-bf0bbc500cc8.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/ssl/private/openmediavault-70b9aedb-7a5f-<span class="number">4286</span>-b53f-bf0bbc500cc8.key;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/openmediavault-webgui.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Openwrt"><a href="#Openwrt" class="headerlink" title="Openwrt"></a>Openwrt</h1><p><a href="https://www.right.com.cn/forum/thread-2983767-1-1.html">https://www.right.com.cn/forum/thread-2983767-1-1.html</a></p>
<p><a href="https://www.right.com.cn/forum/thread-4046582-1-1.html">https://www.right.com.cn/forum/thread-4046582-1-1.html</a></p>
<p>网络-接口-全局网络选项-IPv6 ULA 前缀 这个直接填写小米路由器里面的LAN IPv6地址</p>
<p>用ShadowSocksR Plus+，绕过国内 ？ </p>
<p>password 默认 添加 <code>upos-hz-mirrorakam.akamaized.net</code> 和 <code>bilibili.com</code> 到直连</p>
<p>实测发现 5.9.8-flippy-49+ 版本 配AX6，走的是AX6的DNS，n1上接口和ssr和Turbo acc加速这三个地方设置dns都没有用，电脑必须设置8.8.8.8才能科学上网。</p>
<p>解决办法是吧AX6宽带拨号的地方dns1设为8.8.8.8，n1的dhcp&#x2F;dns的dns转发 192.168.2.1 (AX6的ip,没测试要不要设置这个)，电脑dns可以设置为192.168.2.11 （n1 ip）</p>
<p>看自带文档启用docker ce?</p>
<h1 id="Openwrt-Openclash"><a href="#Openwrt-Openclash" class="headerlink" title="Openwrt Openclash"></a>Openwrt Openclash</h1><p>接口删掉只剩 lan，全剧网络ipv6前缀删掉</p>
<p>地址192.168.2.11，子网掩码255.255.255.0，网关192.168.2.1，dns自定+主路由ip，内置ipv6管理取消，桥接不要关。</p>
<p>dhcp忽略，ipv6都关掉。不用加防火墙代码</p>
<p>openclash 运行模式 Fake-IP(TUN-混合)，网络栈类型Gvisor，内核编译版本armv8，劫持和缓存dns启用。</p>
<p>最后添加配置文件，开整。</p>
<p>需要富强的客户端网关改为192.168.2.11，dns 192.168.2.11</p>
<p>没提到的都不用管</p>
<h1 id="旧"><a href="#旧" class="headerlink" title="旧"></a>旧</h1><p>.&#x2F;install-aml<br>apt-get update</p>
<p>apt install ipset tcpdump net-tools git tcptraceroute iftop -y<br>curl -fsSL <a href="https://get.docker.com/">https://get.docker.com</a> -o get-docker.sh<br>sh get-docker.sh –mirror Aliyun</p>
<p>mkdir -p &#x2F;etc&#x2F;docker<br>tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-‘EOF’<br>{<br>  “registry-mirrors”: [“<a href="https://2wfkcpg0.mirror.aliyuncs.com","https//dockerhub.azk8s.cn%22,%22https://reg-mirror.qiniu.com%22]">https://2wfkcpg0.mirror.aliyuncs.com&quot;,&quot;https://dockerhub.azk8s.cn&quot;,&quot;https://reg-mirror.qiniu.com&quot;]</a><br>}<br>EOF<br>systemctl daemon-reload<br>systemctl restart docker</p>
<p>docker volume create portainer_data<br>docker pull portainer&#x2F;portainer:latest<br>上传public<br>docker run -d -p 9000:9000 –restart&#x3D;always -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock -v portainer_data:&#x2F;data -v &#x2F;public:&#x2F;public –name portainer portainer&#x2F;portainer:latest<br>docker run -d -p 9000:9000 –name portainer –restart always -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock -v portainer_data:&#x2F;data portainer&#x2F;portainer</p>
<p>docker pull unifreq&#x2F;openwrt-aarch64:r20.02.15</p>
<p>ip link set eth0 promisc on</p>
<p>docker network create -d macvlan –subnet&#x3D;192.168.2.0&#x2F;24 –gateway&#x3D;192.168.2.1 -o parent&#x3D;eth0 macnet<br>docker network ls查看已创建了哪些<br>docker run –restart always -d –network macnet –privileged –name openwrt unifreq&#x2F;openwrt-aarch64:latest &#x2F;sbin&#x2F;init</p>
<p>进入openwrt容器修改network设置<br>vi &#x2F;etc&#x2F;config&#x2F;network<br>option ipaddr 192.168.2.11<br>reboot</p>
<p>dns<br>218.104.128.106<br>58.22.96.66</p>
<p>6.1.openwrt旁路由：关闭dhcp，网关填主路由ip，dns可以为主路由ip或114等公共dns，且将其【物理设置】中的【桥接接口】取消掉。还有最重要的1点：务必在防火墙添加规则设置：<br>iptables -t nat -I POSTROUTING -j MASQUERADE 并重启防火墙<br>iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE</p>
<p>6.2.主路由：开启dhcp，网关和dns填旁路由ip。<br>DHCP 选项<br>3,192.168.2.11<br>6,192.168.2.11<br><a href="https://www.right.com.cn/forum/thread-1347921-1-1.html">https://www.right.com.cn/forum/thread-1347921-1-1.html</a></p>
<p>auto eth0<br>iface eth0 inet manual<br>up ip link set eth0 promisc on<br>auto macvlan<br>iface macvlan inet static<br>   address 192.168.12.111<br>   netmask 255.255.255.0<br>   gateway 192.168.12.111<br>   dns-nameservers 192.168.12.111<br>   pre-up ip link add macvlan link eth0 type macvlan mode bridge<br>   post-down ip link del macvlan link eth0 type macvlan mode bridge</p>
<p>cp &#x2F;etc&#x2F;network&#x2F;interfaces &#x2F;root&#x2F;interfaces.bak<br>2. 宿主机无法上网的问题，总的思路是将macvlan与eth0桥接，大概是这个意思；<br>具体，修改&#x2F;etc&#x2F;network&#x2F;interfaces, 修改成如下，然后重启就可以了。修改过程中有报错，可以忽略。这个方法参考Raymond博客  <a href="https://raymondtech.win/2019/08/%E5%9C%A8docker%E4%B8%AD%E8%BF%90%E8%A1%8Copenwrt/">https://raymondtech.win/2019/08/%E5%9C%A8docker%E4%B8%AD%E8%BF%90%E8%A1%8Copenwrt/</a><br>一次性方案，重启失效，粘贴到ssh里面执行，注意换行符号：</p>
<h1 id="添加macvlan桥接网卡，并将192-168-2-8分配到该网卡"><a href="#添加macvlan桥接网卡，并将192-168-2-8分配到该网卡" class="headerlink" title="添加macvlan桥接网卡，并将192.168.2.8分配到该网卡"></a>添加macvlan桥接网卡，并将192.168.2.8分配到该网卡</h1><p>ip addr del 192.168.2.111&#x2F;24 dev eth0; <br>ip link add macvlan link eth0 type macvlan mode bridge; <br>ip addr add 192.168.2.111&#x2F;24 dev macvlan; <br>ip link set macvlan up; <br>ip route del 192.168.2.0&#x2F;24 dev eth0; <br>ip route del default; <br>ip route add 192.168.2.0&#x2F;24 dev macvlan; <br>ip route add default via 192.168.2.1 dev macvlan;</p>
<p>永久<br>nano &#x2F;etc&#x2F;network&#x2F;interfaces<br>#<br>auto eth0<br>iface eth0 inet manual</p>
<p>auto macvlan<br>iface macvlan inet static<br>  address 192.168.2.111<br>  netmask 255.255.255.0<br>  gateway 192.168.2.1<br>  dns-nameservers 192.168.2.1<br>  pre-up ip link add macvlan link eth0 type macvlan mode bridge<br>  post-down ip link del macvlan link eth0 type macvlan mode bridge<br>#<br>————***可以用<br>auto eth0<br>iface eth0 inet manual<br>up ip link set eth0 promisc on<br>auto macvlan<br>iface macvlan inet static<br>   address 192.168.2.111<br>   netmask 255.255.255.0<br>   gateway 192.168.2.1<br>   dns-nameservers 192.168.2.1<br>   pre-up ip link add macvlan link eth0 type macvlan mode bridge<br>   post-down ip link del macvlan link eth0 type macvlan mode bridge</p>
<hr>
<p>service docker start#启动docker<br>service docker stop#停止docker<br>service docker restart#重启docker<br>systemctl enable docker.service<br>systemctl disable docker.service<br>N1 ARMBIAN变成只读文件系统 Read-only file system<br>用U盘启动，运行一次 e2fsck &#x2F;dev&#x2F;mmcblk1p2 ，修复了。谢谢！<br><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=366836">https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=366836</a></p>
<p><a href="https://www.right.com.cn/forum/thread-1375877-1-1.html">https://www.right.com.cn/forum/thread-1375877-1-1.html</a></p>
<p>签到<br>docker pull asdaragon&#x2F;qiandao<br>docker run -d –name qiandao -p 8765:80 –restart&#x3D;always -v $(pwd)&#x2F;qiandao&#x2F;config:&#x2F;usr&#x2F;src&#x2F;app&#x2F;config   asdaragon&#x2F;qiandao</p>
<p>移动硬盘<br>fdisk -l</p>
<p>mount &#x2F;dev&#x2F;sda1 &#x2F;media&#x2F;nnhd</p>
<p>配合docker版本MariaDB(mysql)数据库软件<br>因为默认nextcloud默认提醒不提倡SQLITE数据库，如果用到客户端同步的话，推荐使用MYSQL或者MariaDB<br>SQLITE用起来也没有问题，如果要用MYSQL这里讲一下怎么操作。<br>本人尝试了下docker版本MariaDB非常好用，作为MYSQL的分支，使用起来没有大的区别。<br>docker pull mariadb:10.4.1 本人测试该版本在N1上运行非常稳定，最新版有几率出错<br>部署容器<br>docker run -v &#x2F;root&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;1234 –privileged&#x3D;true –restart unless-stopped –name mariadbs -d mariadb<br>这里  &#x2F;data&#x2F;mysql&#x2F;自行修改安装位置，默认用户名root 默认密码root123这个自己改。<br>之后在nextcloud部署界面选择mariadb数据库，端口3306，数据库名称自己取一个比如nc就可以了，提示下mariadb容器启动需要一两分钟，不要刚启动就安装。<br>有些人这里会报错的，本人也碰到过，直接删除容器重新创建，多试几次应该就可以了。</p>
<p>第一句 拉取镜像：  docker pull arm64v8&#x2F;nextcloud         默认最新版本，最新版貌似视频缩略图没有好的解决方案，本人一直使用低版本也没差，需要低端版本的话，加上:具体版本号，比如docker pull arm64v8&#x2F;nextcloud:16.0.3，下同<br>                          没问题应该会出现很多文件下载的界面，依据网络环境来，如果没成功重试几次。多次失败建议换成阿里云源，方法自己百度，速度飞快。<br>        多挂载一个目录 用于aria2 download<br>                       当所有下载行均显示pull complete的时候，表示下载完成，开始第二句创建容器：<br>docker run -d -p 80:80 –name nextcloud -v &#x2F;media&#x2F;nnhd&#x2F;nextcloud&#x2F;:&#x2F;var&#x2F;www&#x2F;html -v &#x2F;media&#x2F;nnhd&#x2F;download&#x2F;:&#x2F;media&#x2F;download –restart&#x3D;always –privileged&#x3D;true arm64v8&#x2F;nextcloud<br>                        注意 8888端口自行修改，    &#x2F;media&#x2F;nnhd为部署目录位置，建议部署到移动硬盘，自行修改，小钢炮系统应该是&#x2F;media&#x2F;ABC为外置硬盘，armbian安装OMV后应该是sharedfolders文件夹里面为外置硬盘，前提是OMV里面要先挂载硬盘设置共享。<br>不出问题一会就完成了，接下来打开portainer 确认nextcloud已经启动的情况下，浏览器输入地址跟端口，应该就会出现安装界面了，剩下的就自己折腾吧，怎么配置网上已经很多教程了。</p>
<p>登陆等很久！！！</p>
<p>docker pull wahyd4&#x2F;aria2-ui:arm64<br>docker run -d –name aria2-ui -p 2222:80 -e ARIA2_EXTERNAL_PORT&#x3D;2222 -e RPC_SECRET&#x3D;sadf654w -e ENABLE_AUTH&#x3D;true -e ARIA2_USER&#x3D;admin -e ARIA2_PWD&#x3D;sadf654w -v &#x2F;media&#x2F;nnhd&#x2F;download&#x2F;:&#x2F;data –restart&#x3D;always wahyd4&#x2F;aria2-ui:arm64</p>
<p>文件管理器 admin admin</p>
<p>一直困扰了好几天的问题终于解决了（如果有文字密集恐惧症，请直接执行第四步的2个命令就一步到位了），如果本贴看不懂如何将www-data加入自己文件夹目录的朋友 请按照我说的详细方法操作 我也是自己谷歌好久研究出来的（我也是小白 给小白看的 大神都只提个思路不提供具体步骤）：<br>第一步：先跟本帖一样先确认自己u盘是否正常挂上了<br>xshell ssh登录linux deploy配置的Ubuntu 这个会吧？然后盒子电视显示屏幕用es软件查看插上的u盘编号名称比如我的是D897-7DCC（以下内容大家根据自己的u盘识别编码替换我的） ，我的目录路径是&#x2F;storage&#x2F;D897-7DCC，然后deploy那边挂载目录我设置的是&#x2F;mnt&#x2F;media_rw&#x2F;D897-7DCC（好像说填的就是&#x2F;storage&#x2F;D897-7DCC也可以 大家试试 ）</p>
<p>第二步：查看u盘是否成功挂载<br>输入命令：sudo df -h<br>比如我的显示如下：<br>Filesystem      Size  Used Avail Use% Mounted on<br>&#x2F;dev&#x2F;loop0      3.9G  1.3G  2.5G  34% &#x2F;<br>tmpfs           892M  492K  891M   1% &#x2F;dev<br>tmpfs           892M     0  892M   0% &#x2F;dev&#x2F;shm<br>&#x2F;dev&#x2F;block&#x2F;sda   16G  300M   15G   2% &#x2F;mnt&#x2F;media_rw&#x2F;D897-7DCC   #这里说明U挂载成功 如果你deploy那边设置挂载路径是&#x2F;storage&#x2F;D897-7DCC，这里也会显示&#x2F;storage&#x2F;D897-7DCC</p>
<p>再输入命令查看是否具备读写U盘权限<br>输入命令：sudo mkdir &#x2F;mnt&#x2F;media_rw&#x2F;D897-7DCC&#x2F;1122   #其中1122是我要创建的名字为1122的文件夹，大家可以随便取名<br>如果没返回任何错误，那就应该是成功了。大家也可以用winscp或者其他途径去查看&#x2F;mnt&#x2F;media_rw&#x2F;D897-7DCC路径下的U盘是否成功创建了了一个1122的文件夹</p>
<p>第三步：用命令查看1122以及u盘下（如果还有其他文件夹的话）所有文件夹分别属于什么组和什么用户<br>输入命令：cd &#x2F;mnt&#x2F;media_rw&#x2F;D897-7DCC    #意思就是进入u盘的文件夹目录，注意cd后面有个小空格别错了，命令后没返回错误就是正常进入了<br>再输入命令：ls -l    #注意中间空格   然后我的返回如下界面<br>wmc@localhost:&#x2F;mnt&#x2F;media_rw&#x2F;D897-7DCC$ ls -l     #wmc是我创建的用户名 你的跟我一定不一样  这里&#x2F;mnt&#x2F;media_rw&#x2F;D897-7DCC$的显示代表我进入u盘目录正常<br>total 9968<br>drwxrwx—. 2 aid_media_rw aid_media_rw     8192 Aug  6 21:18 1122        #第一个aid_media_rw代表1122的文件夹的用户，第二个位置的aid_media_rw代表1122组名。你的名字跟可能不一样<br>-rwxrwx—. 1 aid_media_rw aid_media_rw 10183060 Jul 31 18:32 linuxdeploy-2.1.0-237.apk   #我自己的U盘的文件不用管<br>drwxrwx—. 2 aid_media_rw aid_media_rw     8192 Aug  5 21:46 LOST.DIR</p>
<p>第四步：知道U盘下1122文件夹组名后，直接输入以下命令将www-data加入到aid_media_rw用户组就行，就是这个命令我找了好几天，主要是不理解原理什么感觉很难，其实就一条命令<br>输入命令：sudo usermod -a -G aid_media_rw www-data       #无返回错误，完美，其实前面都不用管直接输入第四步命令，一步到位，前面三步都是便于大家理解是什么情况。<br>然后输入命令：sudo service apache2 restart     #重启web服务后，看看是不是外挂U盘可以同步文件进去啦！哈哈哈</p>
<p>小钢炮:::</p>
<h1 id="下载汉化包"><a href="#下载汉化包" class="headerlink" title="下载汉化包"></a>下载汉化包</h1><p>curl -O -# <a href="http://www.iyuu.cn/usr/uploads/beikeyun.zip">http://www.iyuu.cn/usr/uploads/beikeyun.zip</a></p>
<h1 id="解压并安装"><a href="#解压并安装" class="headerlink" title="解压并安装"></a>解压并安装</h1><p>unzip .&#x2F;beikeyun.zip -o -d &#x2F;usr&#x2F;local&#x2F;apps&#x2F;dashboard</p>
<h1 id="重启管理面板"><a href="#重启管理面板" class="headerlink" title="重启管理面板"></a>重启管理面板</h1><p>&#x2F;etc&#x2F;init.d&#x2F;S99dashboard restart</p>
<h1 id="如果你的小钢炮是N1，再多执行一条命令："><a href="#如果你的小钢炮是N1，再多执行一条命令：" class="headerlink" title="如果你的小钢炮是N1，再多执行一条命令："></a>如果你的小钢炮是N1，再多执行一条命令：</h1><p>cp &#x2F;usr&#x2F;local&#x2F;apps&#x2F;dashboard&#x2F;aria2.html &#x2F;usr&#x2F;local&#x2F;apps&#x2F;dashboard&#x2F;theme&#x2F;darkmatter&#x2F;templates&#x2F;appcfg&#x2F;aria2.html</p>
<h1 id="重启管理面板-1"><a href="#重启管理面板-1" class="headerlink" title="重启管理面板"></a>重启管理面板</h1><p>&#x2F;etc&#x2F;init.d&#x2F;S99dashboard restart</p>
<p>更改docker源</p>
<p>vi &#x2F;etc&#x2F;docker&#x2F;daemon.json<br>“<a href="https://2wfkcpg0.mirror.aliyuncs.com/">https://2wfkcpg0.mirror.aliyuncs.com</a>“</p>
<p>docker volume create portainer_data<br>docker pull portainer&#x2F;portainer:latest<br>上传public<br>docker run -d -p 9000:9000 –restart&#x3D;always -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock -v portainer_data:&#x2F;data -v &#x2F;public:&#x2F;public –name portainer portainer&#x2F;portainer:latest</p>
<p>docker pull unifreq&#x2F;openwrt-aarch64:r20.03.05</p>
<p>ip link set eth0 promisc on</p>
<p>docker network create -d macvlan –subnet&#x3D;192.168.2.0&#x2F;24 –gateway&#x3D;192.168.2.1 -o parent&#x3D;eth0 macnet</p>
<p>docker run –restart always -d –network macnet –privileged –name openwrt unifreq&#x2F;openwrt-aarch64:r20.03.05 &#x2F;sbin&#x2F;init</p>
<p>进入openwrt容器修改network设置<br>vi &#x2F;etc&#x2F;config&#x2F;network<br>option ipaddr 192.168.2.11<br>reboot</p>
<p>手动穿docker ui<br>docker import openwrt-armvirt-64-h-rootfs.tar.gz lff-openwrt-hw:20.03.08<br>docker run –restart always -d –network macnet –privileged –name openwrt lff-openwrt-hw:20.03.08 &#x2F;sbin&#x2F;init</p>
<p>docker import openwrt-armvirt-64-s-rootfs.tar.gz lff-openwrt-ss:20.03.08<br>docker run –restart always -d –network macnet –privileged –name openwrt lff-openwrt-ss:20.03.08 &#x2F;sbin&#x2F;init</p>
<p>ip link set eth0 promisc on</p>
<p>docker network create -d macvlan –subnet&#x3D;192.168.2.0&#x2F;24 –gateway&#x3D;192.168.2.1 -o parent&#x3D;eth0 macnet</p>
<p>docker pull 80x86&#x2F;baidupcs</p>
<p>docker run -d <br>–name&#x3D;baidupcs <br>–restart always <br>-v &#x2F;media&#x2F;nnhd&#x2F;n1&#x2F;baidupcs:&#x2F;app&#x2F;Downloads <br>-v &#x2F;media&#x2F;nnhd&#x2F;n1&#x2F;baidupcs-config:&#x2F;app&#x2F;.config&#x2F;BaiduPCS-Go <br>-p 5299:5299 <br>80x86&#x2F;baidupcs:latest</p>
<p>–最新</p>
<p><a href="https://wiki.omv-extras.org/">https://wiki.omv-extras.org/</a></p>
]]></content>
      <categories>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>N1</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ笔记</title>
    <url>/%E4%B8%AD%E9%97%B4%E4%BB%B6/rabbitmq-notes/</url>
    <content><![CDATA[<p><a href="https://www.rabbitmq.com/#getstarted">RabbitMQ</a></p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br><span class="line"><span class="comment"># management带网页管理，15672端口。默认用户名密码guest。mq使用hostname作为database dir</span></span><br><span class="line">docker run -d --hostname rabbitmq --name rabbitmq -p 15672:15672 -p 5672:5672 rabbitmq:management</span><br><span class="line"><span class="comment">#以后应该在rabbitmq.conf配置，docker的环境变量配置即将被废弃</span></span><br></pre></td></tr></table></figure>

<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>producer仅发送messages到exchange，exchange从producer接收messages然后推送到匹配的(不匹配的丢弃)queues。</p>
<p>几个概念说明：</p>
<blockquote>
<p>​		Broker：简单来说就是消息队列服务器实体。<br>　　Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。<br>　　Queue：消息队列载体，每个消息都会被投入到一个或多个队列。<br>　　Binding：绑定，它的作用就是把exchange和queue按照路由规则绑定起来。<br>　　Routing Key：路由关键字，exchange根据这个关键字进行消息投递。<br>　　vhost：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。<br>　　producer：消息生产者，就是投递消息的程序。<br>　　consumer：消息消费者，就是接受消息的程序。<br>　　channel：消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。</p>
</blockquote>
<p>消息队列的使用过程大概如下：</p>
<blockquote>
<p>　　（1）客户端连接到消息队列服务器，打开一个channel。<br>　　（2）客户端声明一个exchange，并设置相关属性。<br>　　（3）客户端声明一个queue，并设置相关属性。<br>　　（4）客户端使用routing key，在exchange和queue之间建立好绑定关系。<br>　　（5）客户端投递消息到exchange。<br>　　（6）exchange接收到消息后，就根据消息的key和已经设置的binding，进行消息路由，将消息投递到一个或多个队列里。</p>
</blockquote>
<p>exchange也有几个类型:</p>
<blockquote>
<p><strong>Direct</strong>:  完全根据key进行投递，例如，绑定时设置了routing key为”abc”，那么客户端提交的消息，只有设置了key为”abc”的才会投递到队列。<br><strong>Topic</strong>:  对key进行模式匹配后进行投递，符号”**#<strong>”匹配一个或多个词，符号”</strong>***”匹配正好一个词。例如”abc.#”匹配”abc.def.ghi”，”abc.*”只匹配”abc.def”。最多255bytes。<br><strong>Fanout</strong>:  不需要key，它采取广播模式，一个消息进来时，投递到与该交换机绑定的所有队列。queue</p>
</blockquote>
<p>RabbitMQ支持消息的持久化，也就是数据写在磁盘上，为了数据安全考虑，我想大多数用户都会选择持久化。消息队列持久化包括3个部分：</p>
<blockquote>
<p>　　（1）exchange持久化，在声明时指定durable &#x3D;&gt; 1<br>　　（2）queue持久化，在声明时指定durable &#x3D;&gt; 1<br>　　（3）消息持久化，在投递时指定delivery_mode &#x3D;&gt; 2（1是非持久化）</p>
</blockquote>
<p>如果exchange和queue都是持久化的，那么它们之间的binding也是持久化的。如果exchange和queue两者之间有一个持久化，一个非持久化，就不允许建立绑定。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="常用bean"><a href="#常用bean" class="headerlink" title="常用bean"></a>常用bean</h3><p>**RabbitTemplate **</p>
<p><strong>AnonymousQueue</strong>:non-durable, exclusive, auto-delete queues in AMQP terms。自动生成名字</p>
<p><strong>Binding</strong>:绑定queue到exchange.  <code>BindingBuilder.bind(xxxQueue).to(fanoutExchange);</code></p>
<p><strong>FanoutExchange</strong>:广播交换机</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>@RabbitListener(queues &#x3D; “hello”)注释在方法上或类上再配合@RabbitHandler接收队列接收到的消息。</p>
<h3 id="Work-queues"><a href="#Work-queues" class="headerlink" title="Work queues"></a><a href="https://www.rabbitmq.com/tutorials/tutorial-two-python.html">Work queues</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送方（生产者）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewTask</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;task_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.2.211&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection()) &#123;</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="comment">//配置queue持久化配置</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">durable</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            channel.queueDeclare(QUEUE_NAME, durable, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//从命令行读取要发送的信息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> String.join(<span class="string">&quot; &quot;</span>, args);</span><br><span class="line">            <span class="comment">//设置队列持久化后message还需要设置MessageProperties.TEXT_PLAIN，这样mq遇到异常关闭，message才有保存到磁盘</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, MessageProperties.TEXT_PLAIN, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;[x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接收方（消费者）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;task_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.2.211&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">durable</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, durable, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line">        <span class="comment">//设置预匹配计数为1，在worker处理并确认上一条消息前，mq不会向它发送新消息</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">prefetchCount</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        channel.basicQos(prefetchCount);</span><br><span class="line">        <span class="comment">//消息传递的回调</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;[x] Received&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//模拟耗时操作</span></span><br><span class="line">                doWork(message);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[x] Done&quot;</span>);</span><br><span class="line">                <span class="comment">//最后发送消息确认给mq</span></span><br><span class="line">                channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//消息确认 消费者会返回确认信息给mq。若消费者在没有发送ack的情况下死亡或退出等，mq将会把消息重新排队。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">autoAck</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, autoAck, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置了queue和message的持久化，mq装在docker里面，并且run容器的时候指定了<code>--hostname rabbitmq</code>，生产者发送一条message，mq的网页端可以看到一条Ready的message，然后关闭mq的容器再启动，发现消息丢失。。</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Scoop常用笔记</title>
    <url>/%E5%B7%A5%E5%85%B7/scoop-notes/</url>
    <content><![CDATA[<p>search	搜索软件名<br>install	安装软件<br>update	更新软件<br>status	查看软件状态<br>uninstall	卸载软件<br>info	查看软件详情</p>
<span id="more"></span>

<h2 id="安装Scoop"><a href="#安装Scoop" class="headerlink" title="安装Scoop"></a>安装Scoop</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置程序安装目录</span></span><br><span class="line"><span class="variable">$env:SCOOP</span>=<span class="string">&#x27;D:\Program\Scoop&#x27;</span></span><br><span class="line">[<span class="type">environment</span>]::setEnvironmentVariable(<span class="string">&#x27;SCOOP&#x27;</span>,<span class="variable">$env:SCOOP</span>,<span class="string">&#x27;User&#x27;</span>)</span><br><span class="line"><span class="comment">#开始安装</span></span><br><span class="line"><span class="built_in">iwr</span> <span class="literal">-useb</span> get.scoop.sh | <span class="built_in">iex</span></span><br></pre></td></tr></table></figure>

<h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><h3 id="安装aria2"><a href="#安装aria2" class="headerlink" title="安装aria2"></a>安装aria2</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install aria2</span><br><span class="line"></span><br><span class="line"><span class="comment">#好多软件是从官网，github，amazon下载的，网速比较渣，可以先安装aria2 (scoop install aria2)，安装后 scoop 会优先调用 aria2 来下载软件；</span></span><br><span class="line"><span class="comment">#aria2 一些配置：</span></span><br><span class="line"></span><br><span class="line">aria2<span class="literal">-enabled</span> (default: true)</span><br><span class="line">aria2<span class="literal">-retry-wait</span> (default: <span class="number">2</span>)</span><br><span class="line">aria2<span class="operator">-split</span> (default: <span class="number">5</span>)</span><br><span class="line">aria2<span class="literal">-max-connection-per-server</span> (default: <span class="number">5</span>)</span><br><span class="line">aria2<span class="literal">-min-split-size</span> (default: <span class="number">5</span>M)</span><br><span class="line">scoop config aria2<span class="literal">-enabled</span> false</span><br></pre></td></tr></table></figure>
<h3 id="安装notepad3"><a href="#安装notepad3" class="headerlink" title="安装notepad3"></a>安装notepad3</h3><p><code>scoop install notepad3</code></p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install git</span><br><span class="line"><span class="comment">#配置</span></span><br><span class="line">git config <span class="literal">--global</span> user.name <span class="string">&quot;Nannan&quot;</span></span><br><span class="line">git config <span class="literal">--global</span> user.email <span class="string">&quot;1041836312@qq.com&quot;</span></span><br><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;1041836312@qq.com&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="安卓android-sdk"><a href="#安卓android-sdk" class="headerlink" title="安卓android-sdk"></a>安卓android-sdk</h3><p><code> scoop install android-sdk</code></p>
<h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install nodejs<span class="literal">-lts</span></span><br><span class="line"><span class="comment">#淘宝源</span></span><br><span class="line">npm install <span class="literal">-g</span> cnpm <span class="literal">--registry</span>=https://registry.npm.taobao.org</span><br><span class="line">cnpm install <span class="literal">-g</span> @vue/<span class="built_in">cli</span></span><br><span class="line"><span class="comment">#平常使用</span></span><br><span class="line">npm install <span class="literal">-g</span> @vue/<span class="built_in">cli</span> <span class="literal">--registry</span>=https://registry.npm.taobao.org</span><br><span class="line">npm install <span class="literal">-g</span> typescript</span><br><span class="line">npm install <span class="literal">-g</span> yarn</span><br></pre></td></tr></table></figure>

<h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add java</span><br><span class="line">scoop install openjdk11</span><br></pre></td></tr></table></figure>

<h3 id="安装JetBrains-toolbox"><a href="#安装JetBrains-toolbox" class="headerlink" title="安装JetBrains-toolbox"></a>安装JetBrains-toolbox</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add extras</span><br><span class="line">scoop install jetbrains<span class="literal">-toolbox</span></span><br></pre></td></tr></table></figure>

<h3 id="安装cmder"><a href="#安装cmder" class="headerlink" title="安装cmder"></a>安装cmder</h3><p><code>scoop install cmder</code></p>
<h3 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add extras</span><br><span class="line">scoop install tomcat</span><br></pre></td></tr></table></figure>

<h3 id="安装lua"><a href="#安装lua" class="headerlink" title="安装lua"></a>安装lua</h3><p><code>scoop install lua-for-windows</code></p>
<h3 id="安装chrome"><a href="#安装chrome" class="headerlink" title="安装chrome"></a>安装chrome</h3><p><code>scoop install googlechrome</code></p>
<h3 id="安装notepad"><a href="#安装notepad" class="headerlink" title="安装notepad++"></a>安装notepad++</h3><p><code>scoop install notepadplusplus</code></p>
<h3 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h3><p><code>scoop install ffmpeg</code></p>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install mysql</span><br><span class="line"><span class="comment">#更改my.ini D:\Development\mysql\data</span></span><br><span class="line">mysqld <span class="literal">--initialize</span> <span class="literal">--console</span></span><br><span class="line"><span class="comment">#可以删除scoop里面mysql下data文件夹</span></span><br><span class="line"><span class="comment">#管理员 </span></span><br><span class="line">mysqld <span class="literal">--install</span> mysql8</span><br><span class="line">net <span class="built_in">start</span> mysql8</span><br><span class="line">x-%c;Qdu5Br-</span><br><span class="line">mysql <span class="literal">-u</span> root <span class="literal">-p</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span><span class="string">@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;  </span></span><br><span class="line"><span class="string">mysqld --standalone</span></span><br></pre></td></tr></table></figure>

<h3 id="安装python-x2F-anaconda"><a href="#安装python-x2F-anaconda" class="headerlink" title="安装python&#x2F;anaconda"></a>安装python&#x2F;anaconda</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add extras</span><br><span class="line">scoop install anaconda3</span><br></pre></td></tr></table></figure>

<h3 id="安装ssh-stfp"><a href="#安装ssh-stfp" class="headerlink" title="安装ssh stfp"></a>安装ssh stfp</h3><p><code>scoop install mobaxterm</code></p>
<h3 id="安装hugo"><a href="#安装hugo" class="headerlink" title="安装hugo"></a>安装hugo</h3><p><code>scoop install hugo-extended</code></p>
<h3 id="安装Typora"><a href="#安装Typora" class="headerlink" title="安装Typora"></a>安装Typora</h3><p><code>scoop install Typora</code></p>
<h3 id="安装Windows-Terminal"><a href="#安装Windows-Terminal" class="headerlink" title="安装Windows Terminal"></a>安装Windows Terminal</h3><p><a href="https://zhuanlan.zhihu.com/p/137251716">https://zhuanlan.zhihu.com/p/137251716</a></p>
<h3 id="安装mariadb"><a href="#安装mariadb" class="headerlink" title="安装mariadb"></a>安装mariadb</h3><p><code>scoop install mariadb</code></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Scoop</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记</title>
    <url>/Java/spring-cloud-notes/</url>
    <content><![CDATA[<p>SpringCloud笔记</p>
<span id="more"></span>

<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>聚合项目没有代码，删除pom.xml内的<code>properties,dependencies,dependencyManagement,build</code>等标签。设置<code>&lt;packaging&gt;pom&lt;/packaging&gt;</code>。设置主项目groupId。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.nicenan.mahumall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mahumall<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mahumall<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>聚合<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>再使用Spring Initializr分别创建微服务模块，groupId(组)设置为聚合项目的<code>groupId.xxx</code>xxx为项目名。</p>
<p>聚合项目的modules标签添加创建的微服务模块。微服务模块设置服务注册，配置中心等。</p>
<p>可以将共同依赖和用到的类抽离到common模块，设置各个微服务模块再依赖common模块。</p>
<h2 id="Nacos-服务注册-配置中心"><a href="#Nacos-服务注册-配置中心" class="headerlink" title="Nacos 服务注册 配置中心"></a>Nacos 服务注册 配置中心</h2><h3 id="依赖添加和配置"><a href="#依赖添加和配置" class="headerlink" title="依赖添加和配置"></a>依赖添加和配置</h3><p><a href="https://github.com/nnn149/mahumall/tree/adc675e16ec62a612e689fde7a0a603e7265fc32">查看commit</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--        服务注册发现  俩依赖都要.因为ribbon不再维护换用loadbalancer--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--        配置中心来做配置管理  俩依赖都要--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>启动类加上<code>@EnableDiscoveryClient</code>注解</p>
<p><code>application.yml</code>中配置nacos server的地址，并且指定<code>application.name</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.211</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mahumall-coupon</span></span><br></pre></td></tr></table></figure>



<h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><p>使用Nacos作为配置中心统一管理配置</p>
<ol>
<li><p>引入依赖  <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md">文档</a></p>
</li>
<li><p>创建bootstrap.properties文件，这是springboot的文件，配置应用名字和Nacos Server地址</p>
   <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">mahumall-third-party</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">192.168.2.211:8848</span></span><br><span class="line"><span class="comment">#命名空间</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">c31fdda6-b467-42bf-a5d6-83f7e59fa719</span></span><br><span class="line"><span class="comment">#配置分组</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.group</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="comment">#多配置</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="string">oss.yml</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>进入Nacos Server的配置中心，新建配置。Data ID一定是 xxx.properties。xxx是应用名字。默认规则 应用名.properties</p>
</li>
<li><p>添加任意配置</p>
</li>
<li><p>动态获取配置，使用两个注解<code>@RefreshScope</code>和 <code>@Value(&quot;$&#123;配置项名字&#125;&quot;)</code>。优先使用配置中心内的值</p>
</li>
</ol>
<h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><ol>
<li><p>命名空间  配置隔离。默认public(保留空间)。默认新增的配置都在public空间内。<code>bootstrap.properties</code>里面设置<code>spring.cloud.nacos.config.namespace</code><br>可以设置开发，测试，生产命名空间。推荐：也可以每一个微服务之间项目隔离配置，每个微服务创建自己的命名空间(直接用微服务的名字)，只加载自己命名空间的配置，利用分组切换环境。</p>
</li>
<li><p>配置集  所有配置的集合</p>
</li>
<li><p>配置集id  类似配置的文件名，就是Data ID。 应用名字.properties</p>
</li>
<li><p>配置分组  所有的配置集都输入:DEFAULT_GROUP组  。组可以自己随便输。</p>
</li>
<li><p>加载多个配置文件。</p>
   <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="string">&quot;xxx.yml&quot;</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">&quot;dev&quot;</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="推荐用法"><a href="#推荐用法" class="headerlink" title="推荐用法"></a>推荐用法</h4><ol>
<li>每个<strong>微服务创建自己的命名空间</strong>，创建Data ID，使用<strong>配置分组区分环境</strong>(dev,test,prod)。</li>
<li>在bootstrap.properties指定命名空间和分组</li>
<li>以前springboot任何方式从配置文件中获取值都能用（@Value，@ConfigurationProperties等），优先使用配置中心的值。</li>
</ol>
<h2 id="Openfeign-远程调用"><a href="#Openfeign-远程调用" class="headerlink" title="Openfeign 远程调用"></a>Openfeign 远程调用</h2><p><a href="https://github.com/nnn149/mahumall/commit/e8745ed850e606a31bec7a0d9387a3befc66f6a3">Nacos 测试远程调用</a></p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2020.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol>
<li><p>引入open-feign</p>
</li>
<li><p>编写接口（feign包），告诉SpringCloud这个接口需要调用远程服务</p>
</li>
<li><p>接口加上注解<code>@FeignClient(&quot;mahumall-coupon&quot;)</code>  mahumall-coupon是服务的名字（用Nacos注册）</p>
</li>
<li><p>接口里添加复制的方法签名，需要补全RequestMapping整个路径</p>
</li>
<li><p>开启远程调用功能，启动类注解<code>@EnableFeignClients(basePackages = &quot;cn.nicenan.mahumall.member.feign&quot;)</code> 自动扫描</p>
</li>
<li><p>MemberController写一个测试请求 public R test();</p>
</li>
<li><p>SpringCloud新版本需要在Common中排除Ribbon依赖，微服务模块添加loadbalancer依赖 <a href="https://blog.csdn.net/weixin_43556636/article/details/110653989">https://blog.csdn.net/weixin_43556636/article/details/110653989</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//另一个微服务的controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;coupon/coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouponController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/member/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">memberCoupons</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CouponEntity</span> <span class="variable">couponEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CouponEntity</span>();</span><br><span class="line">        couponEntity.setCouponName(<span class="string">&quot;满99减20&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;coupons&quot;</span>, List.of(couponEntity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//远程调用的接口</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;mahumall-coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CouponFeignService</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/coupon/coupon/member/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">memberCoupons</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用远程调用</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;member/member&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CouponFeignService couponFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/coupons&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">memberCoupons</span> <span class="operator">=</span> couponFeignService.memberCoupons();</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;coupons&quot;</span>, memberCoupons.get(<span class="string">&quot;coupons&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Gateway-网关"><a href="#Gateway-网关" class="headerlink" title="Gateway 网关"></a>Gateway 网关</h2><ol>
<li>添加依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2020.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置Nacos服务注册和配置中心</li>
<li>在<code>application.yml</code>内配置路由规则</li>
</ol>
<h3 id="路由规则"><a href="#路由规则" class="headerlink" title="路由规则"></a>路由规则</h3><p>按yml内从上到下匹配。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">nicenan_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.nicenan.cn</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,nicenan</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">qq_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.qq.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,qq</span></span><br></pre></td></tr></table></figure>

<h3 id="统一跨域处理"><a href="#统一跨域处理" class="headerlink" title="统一跨域处理"></a>统一跨域处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MahumallCorsConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsWebFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,corsConfiguration );</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring JdbcTemplate 整合c3p0  设计 dao 层</title>
    <url>/Java/spring-jdbctemplate-c3p0-dao/</url>
    <content><![CDATA[<p>Spring的JdbcTemplate使用起来比jdbc简便很多,不用自己写很多重复的代码(不用手动关闭连接!).使用jdbcTemplate和c3p0设计一个通用的dao类,方便以后继承.</p>
<span id="more"></span>

<h3 id="什么是JDBC？"><a href="#什么是JDBC？" class="headerlink" title="什么是JDBC？"></a>什么是JDBC？</h3><blockquote><p>①JDBC（Java DataBase Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。而多的这个template,就是模板,是Spring框架为我们提供的.所以JDBCTemplate就是Spring对JDBC的封装,通俗点说就是Spring对jdbc的封装的模板</p>
</blockquote>

<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>我使用mysql,创建一个user表做例子</p>
<figure class="highlight sql"><figcaption><span>创建user表代码</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">	`username` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`password` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`sex` TINYINT(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`regDate` DATETIME <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`pic` <span class="type">BLOB</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`enable` TINYINT(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">COLLATE</span><span class="operator">=</span><span class="string">&#x27;utf8_general_ci&#x27;</span></span><br><span class="line">ENGINE<span class="operator">=</span>InnoDB</span><br><span class="line">AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure>


<h3 id="引入相应jar包"><a href="#引入相应jar包" class="headerlink" title="引入相应jar包"></a>引入相应jar包</h3><p>我使用gradle添加,依赖如下</p>
<figure class="highlight gradle"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    testCompile <span class="keyword">group</span>: <span class="string">&#x27;junit&#x27;</span>, name: <span class="string">&#x27;junit&#x27;</span>, version: <span class="string">&#x27;4.11&#x27;</span></span><br><span class="line">    testCompile <span class="keyword">group</span>: <span class="string">&#x27;junit&#x27;</span>, name: <span class="string">&#x27;junit&#x27;</span>, version: <span class="string">&#x27;4.12&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">&#x27;org.apache.tomcat.embed&#x27;</span>, name: <span class="string">&#x27;tomcat-embed-core&#x27;</span>, version: <span class="string">&#x27;9.0.12&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">&#x27;mysql&#x27;</span>, name: <span class="string">&#x27;mysql-connector-java&#x27;</span>, version: <span class="string">&#x27;8.0.12&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">&#x27;com.mchange&#x27;</span>, name: <span class="string">&#x27;c3p0&#x27;</span>, version: <span class="string">&#x27;0.9.5.2&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">&#x27;org.springframework&#x27;</span>, name: <span class="string">&#x27;spring-context&#x27;</span>, version: <span class="string">&#x27;5.0.9.RELEASE&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">&#x27;org.springframework&#x27;</span>, name: <span class="string">&#x27;spring-jdbc&#x27;</span>, version: <span class="string">&#x27;5.0.9.RELEASE&#x27;</span></span><br><span class="line">    testCompile <span class="keyword">group</span>: <span class="string">&#x27;org.springframework&#x27;</span>, name: <span class="string">&#x27;spring-test&#x27;</span>, version: <span class="string">&#x27;5.0.9.RELEASE&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置applicationContext-xml文件"><a href="#配置applicationContext-xml文件" class="headerlink" title="配置applicationContext.xml文件"></a>配置applicationContext.xml文件</h3><p>配置applicationContext.xml文件,配置好c3p0的dataSource,然后再配置jdbcTemplate.到时候要用jdbcTemplate直接找Spring要就可以了,非常方便!</p>
<figure class="highlight xml"><figcaption><span>applicationContext.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mvcdemo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatementsPerConnection&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.nicenan.mvcdemo.dao.impl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="设计User类-bean"><a href="#设计User类-bean" class="headerlink" title="设计User类(bean)"></a>设计User类(bean)</h3><p>很简单,没啥好说的,遵循javabean规范就可以,字段名要跟数据库中对应表的字段名一致,到时候反射才能生效!(不一样的要在写sql的时候取别名)</p>
<figure class="highlight java"><figcaption><span>User</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nicenan.mvcdemo.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Blob;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getEnable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnable</span><span class="params">(<span class="type">boolean</span> enable)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.enable = enable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> enable;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&quot;</span> + sex +</span><br><span class="line">                <span class="string">&quot;, regDate=&quot;</span> + regDate +</span><br><span class="line">                <span class="string">&quot;, pic=&quot;</span> + pic +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">boolean</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Timestamp regDate;</span><br><span class="line">    <span class="keyword">private</span> Blob pic;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Timestamp <span class="title function_">getRegDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> regDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRegDate</span><span class="params">(Timestamp regDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.regDate = regDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Blob <span class="title function_">getPic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPic</span><span class="params">(Blob pic)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pic = pic;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="设计BaseDao类"><a href="#设计BaseDao类" class="headerlink" title="设计BaseDao类"></a>设计BaseDao类</h3><p>想实现一个BaseDao类,给其他Dao类继承,要实现通用,把BaseDao设计成泛型类,等子类继承的时候传入bean的类型,BaseDao类就能通过反射方法,给所有bean设置属性.<br>首先难点是获取T.class,百度后发现这个方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;T&gt; entityClass = (Class&lt;T&gt;) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们设计三个通用的方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进行增删改操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">iud</span><span class="params">(String sql, Object... args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> getJdbcTemplate().update(sql, args);</span><br><span class="line">    <span class="keyword">return</span> rows;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出一个对象</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(String sql, Object... args)</span> &#123;</span><br><span class="line">    <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> getJdbcTemplate().queryForObject(sql, <span class="keyword">new</span> <span class="title class_">UserRowMapper</span>(), args);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取出很多对象</span></span><br><span class="line"><span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getlist</span><span class="params">(String sql, Object... args)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getJdbcTemplate().query(sql, args, <span class="keyword">new</span> <span class="title class_">UserRowMapper</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>增删改没啥说的,就是调用update方法,传入sql语句参数用?代替,在args传入参数.<br>JdbcTemplate查询一个(queryForObject)和查询多个对象(query)参数完全一致,主要就是在UserRowMapper这个类的设计,这个类要RowMapper<T>接口,这个接口只有一个mapRow方法,在里面我们可以用反射设计一个通用的方法!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">UserRowMapper</span> <span class="keyword">implements</span> <span class="title class_">RowMapper</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">mapRow</span><span class="params">(ResultSet rs, <span class="type">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//通过前面获取的T.class 实例化一个对象</span></span><br><span class="line">                <span class="type">T</span> <span class="variable">entity</span> <span class="operator">=</span> entityClass.newInstance();</span><br><span class="line">                <span class="comment">//取出数据库元数据</span></span><br><span class="line">                <span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line">                <span class="comment">//取出元数据的字段名,根据字段名反射进T</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">label</span> <span class="operator">=</span> rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> entityClass.getDeclaredField(label);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    field.set(entity, rs.getObject(label));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> entity;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException | NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这样BaseDao类就设计好了,等等创建UserDao的时候只要调用父类的方法就可以了,非常简单!</p>
<h3 id="UserDao和UserDaoImpl"><a href="#UserDao和UserDaoImpl" class="headerlink" title="UserDao和UserDaoImpl"></a>UserDao和UserDaoImpl</h3><p>先在UserDao里设计好接口,UserDaoImpl就继承BaseDao类实现UserDao接口里面的方法就可以了.继承BaseDao的时候泛型要填入User类,这样父类才知道要返回什么类型的数据<br>代码如下:</p>
<figure class="highlight java"><figcaption><span>UserDao</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nicenan.mvcdemo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.nicenan.mvcdemo.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">get</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">get</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">query</span><span class="params">(<span class="type">int</span> sex)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>UserDaoImpl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nicenan.mvcdemo.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.nicenan.mvcdemo.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> cn.nicenan.mvcdemo.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> cn.nicenan.mvcdemo.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&lt;User&gt; <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.iud(<span class="string">&quot;INSERT INTO user (username,password,sex,regDate,enable)VALUES(?,?,?,?,?)&quot;</span>,</span><br><span class="line">                user.getUsername(), user.getPassword(), user.getSex(), user.getRegDate(), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.iud(<span class="string">&quot;UPDATE user SET username = ? , password = ? , sex = ?, regDate = ?, pic = ?, enable = ? where id = ?&quot;</span>,</span><br><span class="line">                user.getUsername(), user.getPassword(), user.getSex(), user.getRegDate(), user.getEnable(), user.getId());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">get</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.get(<span class="string">&quot;SELECT * FROM user WHERE id=?&quot;</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">get</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.get(<span class="string">&quot;SELECT * FROM user WHERE username=?&quot;</span>, username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">query</span><span class="params">(<span class="type">int</span> sex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getlist(<span class="string">&quot;SELECT * FROM user WHERE sex=?&quot;</span>, sex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><figure class="highlight java"><figcaption><span>test</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.nicenan.mvcdemo.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> cn.nicenan.mvcdemo.model.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &#123;&quot;classpath:applicationContext.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">daoTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;userDaoImpl&quot;)</span></span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ceshi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;asd&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;qweas&quot;</span>);</span><br><span class="line">        user.setSex(<span class="literal">false</span>);</span><br><span class="line">        user.setRegDate(<span class="keyword">new</span> <span class="title class_">Timestamp</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime()));</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> userDao.add(user);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line">        List&lt;User&gt; query = userDao.query(<span class="number">1</span>);</span><br><span class="line">        System.out.println(query);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">-------------------------------------------</span><br><span class="line">[User&#123;id=1, username=&#x27;w&#x27;, password=&#x27;q&#x27;, sex=true, regDate=2018-09-13 20:55:53.0, pic=null&#125;,</span><br><span class="line">User&#123;id=2, username=&#x27;q&#x27;, password=&#x27;s&#x27;, sex=true, regDate=2018-09-14 13:18:08.0, pic=null&#125;]</span><br></pre></td></tr></table></figure>
<p>成功!</p>
<p>这样设计其他dao层的时候,直接继承BaseDao,就会变得非常轻松了!</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Jdbc</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot从手动装配到自动装配</title>
    <url>/Java/springboot-auto-annotations/</url>
    <content><![CDATA[<p>先理解手动装配,再实现自动装配</p>
<span id="more"></span>

<h2 id="模式注解（Stereotpe-Annotations）"><a href="#模式注解（Stereotpe-Annotations）" class="headerlink" title="模式注解（Stereotpe Annotations）"></a>模式注解（<a href="https://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model#stereotype-annotations">Stereotpe Annotations</a>）</h2><blockquote>
<p>A <strong>stereotype annotation</strong> is an annotation that is used to declare the role that a component plays within the application. For example, the  <code>@Repository</code> annotation in the Spring Framework is a marker for any class that fulﬁlls the role or stereotype of a repository (also known as Data Access Object or DAO).</p>
<p><code>@Component</code>  is a generic stereotype for any Spring-managed component. Any component annotated with <code>@Component</code>  is a candidate for component scanning. Similarly, any component annotated with an annotation that is itself meta-annotated with  <code>@Component</code>  is also a candidate for component scanning. For example, <code>@Service</code> is meta-annotated with  <code>@Component</code> .</p>
</blockquote>
<p>模式注解是一种用于声明在应用中扮演“组件”角色的注解。如 Spring Framework <code>@Repository</code> 标注在任何类上 ，用于扮演仓储角色的模式注解。<code>@Component</code>  作为一种由 Spring 容器托管的通用模式组件，任何被  @Component  标准的组件均为组件扫描的候选对象。类似地，凡是被  <code>@Component</code> 元标注（meta-annotated）的注解，如  <code>@Service</code>  ，当任何组件标注它时，也被视作组件扫描的候选对象。</p>
<h3 id="模式注解举例"><a href="#模式注解举例" class="headerlink" title="模式注解举例"></a>模式注解举例</h3><table>
<thead>
<tr>
<th>Spring Framework 注解</th>
<th>场景说明</th>
<th>起始版本</th>
</tr>
</thead>
<tbody><tr>
<td><code>@Repository</code></td>
<td>数据仓储模式注解</td>
<td>2.0</td>
</tr>
<tr>
<td><code>@Component</code></td>
<td>通用组件模式注解</td>
<td>2.5</td>
</tr>
<tr>
<td><code>@Service</code></td>
<td>服务模式注解</td>
<td>2.5</td>
</tr>
<tr>
<td><code>@Controller</code></td>
<td>控制器模式注解</td>
<td>2.5</td>
</tr>
<tr>
<td><code>@Configuration</code></td>
<td>配置类模式注解</td>
<td>3.0</td>
</tr>
</tbody></table>
<h3 id="装配方式"><a href="#装配方式" class="headerlink" title="装配方式"></a>装配方式</h3><p><code>&lt;context:component-scan&gt;</code> (配置文件)</p>
<p><code>@ComponentScan </code>(用注解)</p>
<p>两个都可以设置要扫描的包 <code>base-package</code></p>
<h3 id="自定义模式注解"><a href="#自定义模式注解" class="headerlink" title="自定义模式注解"></a>自定义模式注解</h3><p><code>@Component</code> “派生性”</p>
<p><code>@Component</code> “层次性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repository</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FirstLevelRepository &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@FirstLevelRepository</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SecondLevelRepository  &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>@Component</code><ul>
<li><code>@Repository</code><ul>
<li><code>@FirstLevelRepository</code><ul>
<li><code>@SecondLevelRepository</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>所以被<code>@SecondLevelRepository</code>注解的类本质也是<code>@Component</code></p>
<h2 id="Spring-Enable-模块装配"><a href="#Spring-Enable-模块装配" class="headerlink" title="Spring @Enable 模块装配"></a>Spring @Enable 模块装配</h2><blockquote>
<p><code>@enable*</code>是Springboot中用来启用某一个功能特性的一类注解。其中包括我们常用的<code>@SpringBootApplication</code>注解中用于开启自动注入的annotation<code>@EnableAutoConfiguration</code>，开启异步方法的annotation<code>@EnableAsync</code>，开启将配置文件中的属性以bean的方式注入到IOC容器的annotation<code>@EnableConfigurationProperties</code>等。</p>
</blockquote>
<p>Spring Framework 3.1 开始支持”@Enable 模块驱动“。所谓“模块”是指具备相同领域的功能组件集合， 组合所形成一个独立 的单元。比如 Web MVC 模块、AspectJ代理模块、Caching（缓存）模块、JMX（Java 管 理扩展）模块、Async（异步处 理）模块等</p>
<h3 id="Enable-注解模块举例"><a href="#Enable-注解模块举例" class="headerlink" title="@Enable 注解模块举例"></a><code>@Enable</code> 注解模块举例</h3><table>
<thead>
<tr>
<th>框架实现</th>
<th><code>@Enable</code>注解模块</th>
<th>激活模块</th>
</tr>
</thead>
<tbody><tr>
<td>Spring Framework</td>
<td><code>@EnableWebMvc</code></td>
<td>Web MVC 模块</td>
</tr>
<tr>
<td></td>
<td><code>@EnableTransactionManagement</code></td>
<td>事务管理模块</td>
</tr>
<tr>
<td></td>
<td><code>@EnableCaching</code></td>
<td>Caching 模块</td>
</tr>
<tr>
<td></td>
<td><code>@EnableMBeanExport</code></td>
<td>JMX 模块</td>
</tr>
<tr>
<td></td>
<td><code>@EnableAsync</code></td>
<td>异步处理模块</td>
</tr>
<tr>
<td></td>
<td><code>@EnableWebFlux</code></td>
<td>Web Flux 模块</td>
</tr>
<tr>
<td></td>
<td><code>@EnableAspectJAutoProxy</code></td>
<td>AspectJ 代理模块</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Spring Boot</td>
<td><code>@EnableAutoConfiguration</code></td>
<td>自动装配模块</td>
</tr>
<tr>
<td></td>
<td><code>@EnableManagementContext</code></td>
<td>Actuator 管理模块</td>
</tr>
<tr>
<td></td>
<td><code>@EnableConfigurationProperties</code></td>
<td>配置属性绑定模块</td>
</tr>
<tr>
<td></td>
<td><code>@EnableOAuth2Sso</code></td>
<td>OAuth2 单点登录模块</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Spring Cloud</td>
<td><code>@EnableEurekaServer</code></td>
<td>Eureka服务器模块</td>
</tr>
<tr>
<td></td>
<td><code>@EnableConfigServer</code></td>
<td>配置服务器模块</td>
</tr>
<tr>
<td></td>
<td><code>@EnableFeignClients</code></td>
<td>Feign客户端模块</td>
</tr>
<tr>
<td></td>
<td><code>@EnableZuulProxy</code></td>
<td>服务网关 Zuul 模块</td>
</tr>
<tr>
<td></td>
<td><code>@EnableCircuitBreaker</code></td>
<td>服务熔断模块</td>
</tr>
</tbody></table>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="注解驱动方式"><a href="#注解驱动方式" class="headerlink" title="注解驱动方式"></a>注解驱动方式</h4><p>以SpringMvc为例:<code>@EnableWebMvc</code>注解有个<code>@Import</code>指向了DelegatingWebMvcConfiguration类,不够灵活</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> </span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span> </span><br><span class="line"><span class="meta">@Documented</span> </span><br><span class="line"><span class="meta">@Import(DelegatingWebMvcConfiguration.class)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="接口编程方式"><a href="#接口编程方式" class="headerlink" title="接口编程方式"></a>接口编程方式</h4><p><code>@EnableCaching</code> 注解中<code>@Import</code>指向一个ImportSelector接口的实现类,这个接口只需要重写selectImports这个方法,可以在方法里写判断,能灵活的返回一个String[]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span> </span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> </span><br><span class="line"><span class="meta">@Documented</span> </span><br><span class="line"><span class="meta">@Import(CachingConfigurationSelector.class)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableCaching&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachingConfigurationSelector</span> <span class="keyword">extends</span> <span class="title class_">AdviceModeImportSelector</span>&lt;EnableCaching&gt; &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class="line">		<span class="keyword">switch</span> (adviceMode) &#123;</span><br><span class="line">			<span class="keyword">case</span> PROXY:</span><br><span class="line">				<span class="keyword">return</span> getProxyImports();</span><br><span class="line">			<span class="keyword">case</span> ASPECTJ:</span><br><span class="line">				<span class="keyword">return</span> getAspectJImports();</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义-Enable-模块"><a href="#自定义-Enable-模块" class="headerlink" title="自定义@Enable 模块"></a>自定义<code>@Enable</code> 模块</h3><h4 id="基于注解驱动实现-EnableHelloWorld"><a href="#基于注解驱动实现-EnableHelloWorld" class="headerlink" title="基于注解驱动实现  - @EnableHelloWorld "></a>基于注解驱动实现  - <code>@EnableHelloWorld </code></h4><p>不详写</p>
<h4 id="基于接口驱动实现-EnableHelloWorld"><a href="#基于接口驱动实现-EnableHelloWorld" class="headerlink" title="基于接口驱动实现 - @EnableHelloWorld"></a>基于接口驱动实现 - <code>@EnableHelloWorld</code></h4><p><code>@EnableHelloWorld</code>-&gt;<code>HelloWorldImportSelector </code>-&gt;<code>HelloWorldConfiguration </code>-&gt;helloWorld</p>
<p>准备一个helloWorld的Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">helloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World 2018&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义一个helloworld的选择器继承ImportSelector,实现接口方法,返回上面的Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;HelloWorldConfiguration.class.getName()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义个 <code>@EnableHelloWorld</code> 注解,<code>@Import</code>指向自定义的HelloWorldImportSelector</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Import(HelloWorldImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableHelloWorld &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在启动类加上<code>@EnableHelloWorld</code>,就可以使用helloworld这个Bean了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableHelloWorld</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnableHelloWorldBootstrap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(EnableHelloWorldBootstrap.class).web(WebApplicationType.NONE).run(args);</span><br><span class="line">        <span class="type">String</span> <span class="variable">helloWorld</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;helloWorld&quot;</span>, String.class);</span><br><span class="line">        System.out.println(helloWorld);</span><br><span class="line">        context.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-条件装配"><a href="#Spring-条件装配" class="headerlink" title="Spring 条件装配"></a>Spring 条件装配</h2><blockquote>
<p>从 Spring Framework 3.1 开始，允许在 Bean 装配时增加前置条件判断。spring条件装配实现主要有两种实现方式，一种是配置化条件装配，使用<code>@Profile</code>注解来实现。另一种比较灵活，底层实现Condition接口来进行实现。</p>
</blockquote>
<h3 id="条件注解举例"><a href="#条件注解举例" class="headerlink" title="条件注解举例"></a>条件注解举例</h3><table>
<thead>
<tr>
<th>Spring 注解</th>
<th>场景说明</th>
<th>起始版本</th>
</tr>
</thead>
<tbody><tr>
<td>@Profile</td>
<td>配置化条件装配(不灵活,条件单一)</td>
<td>3.1</td>
</tr>
<tr>
<td>@Conditional</td>
<td>编程条件装配(灵活)</td>
<td>4.0</td>
</tr>
</tbody></table>
<h3 id="自定义条件装配"><a href="#自定义条件装配" class="headerlink" title="自定义条件装配"></a>自定义条件装配</h3><h4 id="配置方式-Profile"><a href="#配置方式-Profile" class="headerlink" title="配置方式- @Profile"></a>配置方式- <code>@Profile</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个计算接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CalculateService</span> &#123;</span><br><span class="line">    Integer <span class="title function_">sum</span><span class="params">(Integer... values)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类Java7版本,用@Profile(&quot;Java7&quot;)注解</span></span><br><span class="line"><span class="meta">@Profile(&quot;Java7&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java7CalculateService</span> <span class="keyword">implements</span> <span class="title class_">CalculateService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">sum</span><span class="params">(Integer... values)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Java7实现&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer value : values) &#123;</span><br><span class="line">            sum += value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类Java8版本,用@Profile(&quot;Java8&quot;)注解</span></span><br><span class="line"><span class="meta">@Profile(&quot;Java8&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8CalculateService</span> <span class="keyword">implements</span> <span class="title class_">CalculateService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">sum</span><span class="params">(Integer... values)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Java8实现&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Stream.of(values).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引导类里面指定profiles(&quot;Java8&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;cn.nicenan.springbootdemo.service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculateServiceBootstrap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(CalculateServiceBootstrap.class).web(WebApplicationType.NONE).profiles(<span class="string">&quot;Java8&quot;</span>).run(args);</span><br><span class="line">        <span class="type">CalculateService</span> <span class="variable">calculateService</span> <span class="operator">=</span> context.getBean(CalculateService.class);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> calculateService.sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编程方式-Conditional"><a href="#编程方式-Conditional" class="headerlink" title="编程方式- @Conditional "></a>编程方式- <code>@Conditional </code></h4><p>自定义<code>@ConditionalOnSystemProperty</code>注解,指向OnSystemPropertyCondition.class,这是我们自定义的一个类,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnSystemPropertyCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnSystemProperty &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>必须要实现Condition接口,重写matches方法,这里用AnnotatedTypeMetadata获取注解的元信息,取出来后比较和System里配置的值是否相等 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnSystemPropertyCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; attributes = metadata.getAnnotationAttributes(ConditionalOnSystemProperty.class.getName());</span><br><span class="line">        <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> String.valueOf(attributes.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">propertyValue</span> <span class="operator">=</span> String.valueOf(attributes.get(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">javaPropertyValue</span> <span class="operator">=</span> System.getProperty(propertyName);</span><br><span class="line">        <span class="keyword">return</span> propertyValue.equals(javaPropertyValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在启动类中测试,<code>@ConditionalOnSystemProperty</code>注解了helloWorld这个Bean,当系统用户名和10418相等的时候就装载这个Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionalOnSystemPropertyBootstrap</span> &#123;</span><br><span class="line">    <span class="meta">@ConditionalOnSystemProperty(name = &quot;user.name&quot;, value = &quot;10418&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">helloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello world nnn&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(ConditionalOnSystemPropertyBootstrap.class).web(WebApplicationType.NONE).run(args);</span><br><span class="line">        <span class="type">String</span> <span class="variable">helloWorld</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;helloWorld&quot;</span>, String.class);</span><br><span class="line">        System.out.println(helloWorld);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Spring-Boot-自动装配"><a href="#Spring-Boot-自动装配" class="headerlink" title="Spring Boot 自动装配"></a>Spring Boot 自动装配</h2><p>在 Spring Boot 场景下，基于约定大于配置的原则，实现 Spring 组件自动装配的目的。其中使用了</p>
<h3 id="底层装配技术"><a href="#底层装配技术" class="headerlink" title="底层装配技术"></a>底层装配技术</h3><ul>
<li>Spring 模式注解装配 </li>
<li>Spring <code>@Enable</code> 模块装配 </li>
<li>Spring 条件装配装配 </li>
<li>Spring 工厂加载机制 <ul>
<li>实现类： <code>SpringFactoriesLoader </code></li>
<li>配置资源： <code>META-INF/spring.factories</code></li>
</ul>
</li>
</ul>
<h3 id="自动装配举例"><a href="#自动装配举例" class="headerlink" title="自动装配举例"></a>自动装配举例</h3><p>参考 <code>META-INF/spring.factories</code> idea中搜索</p>
<h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><ol>
<li><p>激活自动装配 -  <code>@EnableAutoConfiguration </code> </p>
<blockquote>
<p>一旦加上此注解，那么将会开启自动装配功能，简单点讲，Spring会试图在你的classpath下找到所有配置的Bean然后进行装配。当然装配Bean时，会根据若干个(Conditional)定制规则来进行初始化。</p>
</blockquote>
</li>
<li><p>实现自动装配 -  <code>XXXAutoConfiguration </code></p>
</li>
<li><p>配置自动装配实现 - <code>META-INF/spring.factories</code></p>
</li>
</ol>
<h3 id="自定义自动装配"><a href="#自定义自动装配" class="headerlink" title="自定义自动装配"></a>自定义自动装配</h3><p>创建一个自动配置类,<code>@EnableHelloWorld</code>基于上面的自定义的<code>@Enable</code>模块,<code>@ConditionalOnSystemProperty</code> 同上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableHelloWorld</span></span><br><span class="line"><span class="meta">@ConditionalOnSystemProperty(name = &quot;user.name&quot;, value = &quot;10418&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldAutoConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在classpath目录下的META-INF&#x2F;spring.factories配置好自动装配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">cn.nicenan.springbootdemo.configuration.HelloWorldAutoConfiguration</span><br></pre></td></tr></table></figure>

<p>启动类开启<code>@EnableAutoConfiguration</code>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnableAutoConfigurationBootstrap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(EnableAutoConfigurationBootstrap.class).web(WebApplicationType.NONE).run(args);</span><br><span class="line">        <span class="type">String</span> <span class="variable">helloWorld</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;helloWorld&quot;</span>, String.class);</span><br><span class="line">        System.out.println(helloWorld);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>HelloWorldAutoConfiguration </code></p>
<ul>
<li><p>条件判断： <code>user.name == &quot;10418&quot; </code></p>
</li>
<li><p>模式注解： <code>@Configuration </code></p>
</li>
<li><p><code>@Enable</code> 模块： <code>@EnableHelloWorld</code> -&gt; <code>HelloWorldImportSelector</code> -&gt;  <code>HelloWorldConfiguration</code> - &gt; <code>helloWorld</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot笔记</title>
    <url>/Java/springboot-notes/</url>
    <content><![CDATA[<p>Springboot笔记</p>
<span id="more"></span>

<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="方法参数注入"><a href="#方法参数注入" class="headerlink" title="方法参数注入"></a>方法参数注入</h3><blockquote>
<p>@Configuration标注在类上，在<code>@Bean</code>标注的方法上(如果未通过@Bean指定bean的名称，则默认与标注的方法名相同)，如果你传入了参数，springboot会自动会为这个参数在spring上下文里寻找这个类型的引用。并先初始化这个类的实例。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FanoutExchange <span class="title function_">fanout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;tut.fanout&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">autoDeleteQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnonymousQueue</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////Spring自动会执行这个方法，自动填入fanout和queue，这样exchange和queue绑定关系就建成了，并不需要使用这个bean。所以后面直接用fanout就可以了。</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">binding1</span><span class="params">(FanoutExchange fanout,</span></span><br><span class="line"><span class="params">                        <span class="meta">@Qualifier(&quot;autoDeleteQueue1&quot;)</span> Queue qqq)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(qqq).to(fanout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，springboot会按类型去寻找，。如果这个类型有多个实例被注册到spring上下文，按形参的名字注册bean，若按类型和名字都找不到，那你就需要加上<code>@Qualifier(&quot;Bean的名称&quot;)</code>来指定。<code>FanoutExchange fanout</code>这个形参可以自动装入上面配置的<code>public FanoutExchange fanout()</code>。<code>@Qualifier(&quot;autoDeleteQueue1&quot;) Queue qqq</code>这个形参可以按指定的名称装入<code>public Queue autoDeleteQueue1()</code>。</p>
<h3 id="注解动态参数"><a href="#注解动态参数" class="headerlink" title="注解动态参数"></a>注解动态参数</h3><blockquote>
<p>注解只能配置常量，在一些构架的开发中，有时候我们需要给注解动态配置一些值，或者想从配置文件中读取配置。直接在注解上配置是无法实现的，但是我们可以在拿到注解的值之后，再对这些值进行另外的操作。比如在注解上面配置占位符，在使用的时候，再对这些占位符进行替换。在RocketMQ的监听配置中，就使用了这个技术。</p>
</blockquote>
<p><strong>${key名称}</strong></p>
<ol>
<li>用户获取外部文件中指定key的值</li>
<li>可以在xml中配置，也可以出现在@value注解中</li>
<li>一般用于获取数据库配置内容信息</li>
</ol>
<p><strong>#{表达式}</strong></p>
<ol>
<li>spring中el表达式的格式</li>
<li>可以在xml中配置，也可以出现在@value注解中</li>
<li>可以任意表达式，支持运算符</li>
</ol>
<p><a href="https://zhuanlan.zhihu.com/p/99272510">SpringBoot之Spring@Value属性注入使用详解</a></p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="CommandLineRunner-启动时自动执行方法"><a href="#CommandLineRunner-启动时自动执行方法" class="headerlink" title="CommandLineRunner 启动时自动执行方法"></a>CommandLineRunner 启动时自动执行方法</h3><p>SpringBoot项目在启动时会<strong>遍历所有的CommandLineRunner的实现类</strong>并调用其中的run方法。</p>
<ul>
<li>如果整个系统中有多个CommandLineRunner的实现类，那么可以使用@Order注解对这些实现类的调用顺序进行排序，数字越小越先执行。</li>
<li>run方法的参数是系统启动是传入的参数，即入口类中main方法的参数。在调用SpringApplication.run方法时被传入 SpringBoot项目中。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandLineRunner1</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CommandLineRunner1:&quot;</span> + Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandLineRunner2</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CommandLineRunner2:&quot;</span> + Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Scheduled-定时任务"><a href="#Scheduled-定时任务" class="headerlink" title="Scheduled 定时任务"></a>Scheduled 定时任务</h3><p>在方法上使用<code>@Scheduled</code>注解启动定时任务。</p>
<p>fixedRate属性设置再次调用的延时(不等待调用完成)，可能造成重复执行问题。</p>
<p>fixedDelay属性等到方法执行完毕后延时。推荐。</p>
<p>initialDelay配合上面其一使用，配置第一次执行的延时。</p>
<h4 id="cron属性"><a href="#cron属性" class="headerlink" title="cron属性"></a>cron属性</h4><blockquote>
<p>cron属性值是一个String类型的时间表达式，各部分的含义如下：</p>
<p>Seconds : 可出现”, - * &#x2F;“四个字符，有效范围为0-59的整数<br>Minutes : 可出现”, - * &#x2F;“四个字符，有效范围为0-59的整数<br>Hours : 可出现”, - * &#x2F;“四个字符，有效范围为0-23的整数<br>DayofMonth : 可出现”, - * &#x2F; ? L W C”八个字符，有效范围为0-31的整数<br>Month : 可出现”, - * &#x2F;“四个字符，有效范围为1-12的整数或JAN-DEc<br>DayofWeek : 可出现”, - * &#x2F; ? L C #“四个字符，有效范围为1-7的整数或SUN-SAT两个范围。1表示星期天，2表示星期一，依次类推<br>Year : 可出现”, - * &#x2F;“四个字符，有效范围为1970-2099年</p>
<p>举几个例子如下：</p>
<p>“0 0 12 * * ?” 每天中午十二点触发<br>“0 30 10 ? * *” 每天早上10：30触发<br>“0 15 10 * * ?” 每天早上10：15触发<br>“0 15 10 * * ? *” 每天早上10：15触发<br>“0 15 10 * * ? 2018” 2018年的每天早上10：15触发<br>“0 * 14 * * ?” 每天从下午2点开始到2点59分每分钟一次触发<br>“0 0&#x2F;5 14 * * ?” 每天从下午2点开始到2：55分结束每5分钟一次触发<br>“0 0&#x2F;5 14,18 * * ?” 每天的下午2点至2：55和6点至6点55分两个时间段内每5分钟一次触发<br>“0 0-5 14 * * ?” 每天14:00至14:05每分钟一次触发<br>“0 10,44 14 ? 3 WED” 三月的每周三的14：10和14：44触发<br>“0 15 10 ? * MON-FRI” 每个周一、周二、周三、周四、周五的10：15触发</p>
</blockquote>
<h3 id="Profile-环境配置"><a href="#Profile-环境配置" class="headerlink" title="Profile 环境配置"></a>Profile 环境配置</h3><p>profile 可以让 Spring 对不同的环境提供不同配置的功能，可以通过激活、指定参数等方式快速切换环境。</p>
<h4 id="创建自定义的properties文件"><a href="#创建自定义的properties文件" class="headerlink" title="创建自定义的properties文件"></a>创建自定义的properties文件</h4><p>如果需要创建自定义的的properties文件时，可以新建名为application-xxx.properties的文件。</p>
<p>若我们需要在两种环境下进行切换，只需要在application.properties中加入<code>spring.profiles.active=xxx</code>即可。或者在命令行后追加<code>--spring.profiles.active=xxx,xxx；</code></p>
<p>.properties替换成.yml同理。</p>
<h4 id="Profile注解"><a href="#Profile注解" class="headerlink" title="@Profile注解"></a>@Profile注解</h4><p><code>@profile</code>注解的作用是指定类或方法在特定的 Profile 环境生效，任何<code>@Component</code>或<code>@Configuration</code>注解的类都可以使用<code>@Profile</code>注解。在使用DI来依赖注入的时候，能够根据<code>profile</code>标明的环境，将注入符合当前运行环境的相应的bean。</p>
<p><code>@Profile</code>可以用在类和方法上。</p>
<p><code>@Profile</code>可以填入字符串数组<code> @Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</code></p>
<p><code>@Profile</code>加上感叹号代表不在此环境下生效<code> @Profile(&quot;!dev&quot;)</code></p>
<h4 id="配合CommandLineRunner"><a href="#配合CommandLineRunner" class="headerlink" title="配合CommandLineRunner"></a>配合CommandLineRunner</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Profile(&quot;usage_message&quot;)</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CommandLineRunner <span class="title function_">usage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This app uses Spring Profiles to control its behavior.\n&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="StopWatch-计时器"><a href="#StopWatch-计时器" class="headerlink" title="StopWatch 计时器"></a>StopWatch 计时器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StopWatch</span> <span class="variable">watch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">watch.start();</span><br><span class="line">doWork(xxx);</span><br><span class="line">watch.stop();</span><br><span class="line">System.out.println(watch.getTotalTimeSeconds() + <span class="string">&quot;s&quot;</span>);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot Jpa 笔记</title>
    <url>/Java/springdata-jpa-notes/</url>
    <content><![CDATA[<p>参考:</p>
<ul>
<li><a href="https://github.com/zempty-zhaoxuan/spring-data-jpa">工作上关于spring data jpa 的使用详细总结</a></li>
<li><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.named-queries">Spring Data JPA - Reference Documentation</a></li>
</ul>
<span id="more"></span>

<h4 id="jpa关键字使用"><a href="#jpa关键字使用" class="headerlink" title="jpa关键字使用"></a>jpa关键字使用</h4><p>定义一个名为xxxRepository的接口继承<code>JpaRepository&lt;xxx,ID&gt;</code> 泛型1(xxx)是Entity，泛型2(ID)是主键类型。</p>
<h5 id="查询关键字"><a href="#查询关键字" class="headerlink" title="查询关键字"></a>查询关键字</h5><table>
<thead>
<tr>
<th align="left">Keyword</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>find…By</code>, <code>read…By</code>, <code>get…By</code>, <code>query…By</code>, <code>search…By</code>, <code>stream…By</code></td>
<td align="left">General query method returning typically the repository type, a <code>Collection</code> or <code>Streamable</code> subtype or a result wrapper such as <code>Page</code>, <code>GeoResults</code> or any other store-specific result wrapper. Can be used as <code>findBy…</code>, <code>findMyDomainTypeBy…</code> or in combination with additional keywords.</td>
</tr>
<tr>
<td align="left"><code>exists…By</code></td>
<td align="left">Exists projection, returning typically a <code>boolean</code> result.</td>
</tr>
<tr>
<td align="left"><code>count…By</code></td>
<td align="left">Count projection returning a numeric result.</td>
</tr>
<tr>
<td align="left"><code>delete…By</code>, <code>remove…By</code></td>
<td align="left">Delete query method returning either no result (<code>void</code>) or the delete count.</td>
</tr>
<tr>
<td align="left"><code>…First&lt;number&gt;…</code>, <code>…Top&lt;number&gt;…</code></td>
<td align="left">Limit the query results to the first <code>&lt;number&gt;</code> of results. This keyword can occur in any place of the subject between <code>find</code> (and the other keywords) and <code>by</code>.</td>
</tr>
<tr>
<td align="left"><code>…Distinct…</code></td>
<td align="left">Use a distinct query to return only unique results. Consult the store-specific documentation whether that feature is supported. This keyword can occur in any place of the subject between <code>find</code> (and the other keywords) and <code>by</code>.</td>
</tr>
</tbody></table>
<h5 id="条件关键字"><a href="#条件关键字" class="headerlink" title="条件关键字"></a>条件关键字</h5><table>
<thead>
<tr>
<th align="left">关键字</th>
<th align="left">例子</th>
<th align="left">JPQL 片段</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>Distinct</code></td>
<td align="left"><code>findDistinctByLastnameAndFirstname</code></td>
<td align="left"><code>select distinct … where x.lastname = ?1 and x.firstname = ?2</code></td>
</tr>
<tr>
<td align="left"><code>And</code></td>
<td align="left"><code>findByLastnameAndFirstname</code></td>
<td align="left"><code>… where x.lastname = ?1 and x.firstname = ?2</code></td>
</tr>
<tr>
<td align="left"><code>Or</code></td>
<td align="left"><code>findByLastnameOrFirstname</code></td>
<td align="left"><code>… where x.lastname = ?1 or x.firstname = ?2</code></td>
</tr>
<tr>
<td align="left"><code>Is</code>, <code>Equals</code></td>
<td align="left"><code>findByFirstname</code>,,<code>findByFirstnameIs``findByFirstnameEquals</code></td>
<td align="left"><code>… where x.firstname = ?1</code></td>
</tr>
<tr>
<td align="left"><code>Between</code></td>
<td align="left"><code>findByStartDateBetween</code></td>
<td align="left"><code>… where x.startDate between ?1 and ?2</code></td>
</tr>
<tr>
<td align="left"><code>LessThan</code></td>
<td align="left"><code>findByAgeLessThan</code></td>
<td align="left"><code>… where x.age &lt; ?1</code></td>
</tr>
<tr>
<td align="left"><code>LessThanEqual</code></td>
<td align="left"><code>findByAgeLessThanEqual</code></td>
<td align="left"><code>… where x.age &lt;= ?1</code></td>
</tr>
<tr>
<td align="left"><code>GreaterThan</code></td>
<td align="left"><code>findByAgeGreaterThan</code></td>
<td align="left"><code>… where x.age &gt; ?1</code></td>
</tr>
<tr>
<td align="left"><code>GreaterThanEqual</code></td>
<td align="left"><code>findByAgeGreaterThanEqual</code></td>
<td align="left"><code>… where x.age &gt;= ?1</code></td>
</tr>
<tr>
<td align="left"><code>After</code></td>
<td align="left"><code>findByStartDateAfter</code></td>
<td align="left"><code>… where x.startDate &gt; ?1</code></td>
</tr>
<tr>
<td align="left"><code>Before</code></td>
<td align="left"><code>findByStartDateBefore</code></td>
<td align="left"><code>… where x.startDate &lt; ?1</code></td>
</tr>
<tr>
<td align="left"><code>IsNull</code>, <code>Null</code></td>
<td align="left"><code>findByAge(Is)Null</code></td>
<td align="left"><code>… where x.age is null</code></td>
</tr>
<tr>
<td align="left"><code>IsNotNull</code>, <code>NotNull</code></td>
<td align="left"><code>findByAge(Is)NotNull</code></td>
<td align="left"><code>… where x.age not null</code></td>
</tr>
<tr>
<td align="left"><code>Like</code></td>
<td align="left"><code>findByFirstnameLike</code></td>
<td align="left"><code>… where x.firstname like ?1</code></td>
</tr>
<tr>
<td align="left"><code>NotLike</code></td>
<td align="left"><code>findByFirstnameNotLike</code></td>
<td align="left"><code>… where x.firstname not like ?1</code></td>
</tr>
<tr>
<td align="left"><code>StartingWith</code></td>
<td align="left"><code>findByFirstnameStartingWith</code></td>
<td align="left"><code>… where x.firstname like ?1</code> (parameter bound with appended <code>%</code>)</td>
</tr>
<tr>
<td align="left"><code>EndingWith</code></td>
<td align="left"><code>findByFirstnameEndingWith</code></td>
<td align="left"><code>… where x.firstname like ?1</code> (parameter bound with prepended <code>%</code>)</td>
</tr>
<tr>
<td align="left"><code>Containing</code></td>
<td align="left"><code>findByFirstnameContaining</code></td>
<td align="left"><code>… where x.firstname like ?1</code> (parameter bound wrapped in <code>%</code>)</td>
</tr>
<tr>
<td align="left"><code>OrderBy</code></td>
<td align="left"><code>findByAgeOrderByLastnameDesc</code></td>
<td align="left"><code>… where x.age = ?1 order by x.lastname desc</code></td>
</tr>
<tr>
<td align="left"><code>Not</code></td>
<td align="left"><code>findByLastnameNot</code></td>
<td align="left"><code>… where x.lastname &lt;&gt; ?1</code></td>
</tr>
<tr>
<td align="left"><code>In</code></td>
<td align="left"><code>findByAgeIn(Collection&lt;Age&gt; ages)</code></td>
<td align="left"><code>… where x.age in ?1</code></td>
</tr>
<tr>
<td align="left"><code>NotIn</code></td>
<td align="left"><code>findByAgeNotIn(Collection&lt;Age&gt; ages)</code></td>
<td align="left"><code>… where x.age not in ?1</code></td>
</tr>
<tr>
<td align="left"><code>True</code></td>
<td align="left"><code>findByActiveTrue()</code></td>
<td align="left"><code>… where x.active = true</code></td>
</tr>
<tr>
<td align="left"><code>False</code></td>
<td align="left"><code>findByActiveFalse()</code></td>
<td align="left"><code>… where x.active = false</code></td>
</tr>
<tr>
<td align="left"><code>IgnoreCase</code></td>
<td align="left"><code>findByFirstnameIgnoreCase</code></td>
<td align="left"><code>… where UPPER(x.firstname) = UPPER(?1)</code></td>
</tr>
</tbody></table>
<h5 id="更新删除"><a href="#更新删除" class="headerlink" title="更新删除"></a>更新删除</h5><p>先查询，然后更改属性，最后save()保存即可。</p>
<h4 id="SQL语句使用"><a href="#SQL语句使用" class="headerlink" title="SQL语句使用"></a>SQL语句使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClassRoomRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;ClassRoom,Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用的 JPQL 的 sql 形式 from 后面是类名</span></span><br><span class="line">    <span class="comment">// ?1 代表是的是方法中的第一个参数</span></span><br><span class="line">    <span class="meta">@Query(&quot;select s from ClassRoom s where s.name =?1&quot;)</span></span><br><span class="line">    List&lt;ClassRoom&gt; <span class="title function_">findClassRoom1</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是使用正常的 sql 语句去查询</span></span><br><span class="line">    <span class="comment">// :name 是通过 @Param 注解去确定的</span></span><br><span class="line">    <span class="meta">@Query(nativeQuery = true,value = &quot;select * from class_room c where c.name =:name&quot;)</span></span><br><span class="line">    List&lt;ClassRoom&gt; <span class="title function_">findClassRoom2</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span>String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考上述的案例我们可以发现，<strong>sql 有两种呈现形式</strong>：</p>
<ol>
<li>JPQL 形式的 sql 语句，from 后面是以类名呈现的。</li>
<li>原生的 sql 语句，需要使用 nativeQuery &#x3D; true 指定使用原生 sql</li>
</ol>
<p><strong>sql 中的参数传递也有两种形式</strong>：</p>
<ol>
<li>使用问号 ?，紧跟数字序列，数字序列从1 开始，如 ?1 接收第一个方法参数的值。</li>
<li>使用冒号：，紧跟参数名，参数名是通过@Param 注解来确定。</li>
</ol>
<h5 id="Sort排序"><a href="#Sort排序" class="headerlink" title="Sort排序"></a>Sort排序</h5><p>spring data jpa 提供了一个 Sort 类来进行分类排序，下面通过代码来说明 Sort 的使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface TeacherRepositoty extends JpaRepository&lt;Teacher,Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    // 正常使用，只是多加了一个 sort 参数而已</span><br><span class="line">    @Query(&quot;select t from Teacher t where t.subject = ?1&quot;)</span><br><span class="line">    List&lt;Teacher&gt; getTeachers(String subject, Sort sort);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码正常的写 sql 语句，只是多加了一个 Sort 参数而已，如何实例化 Sort 应该是我们关注的重点，现在看测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/sort/&#123;subject&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;Teacher&gt; <span class="title function_">getTeachers</span><span class="params">(<span class="meta">@PathVariable(&quot;subject&quot;)</span> String subject)</span> &#123;</span><br><span class="line">      <span class="comment">// 第一种方法实例化出 Sort 类，根据年龄进行升序排列</span></span><br><span class="line">      <span class="type">Sort</span> <span class="variable">sort1</span> <span class="operator">=</span> Sort.by(Sort.Direction.ASC, <span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//定义多个字段的排序</span></span><br><span class="line">      <span class="type">Sort</span> <span class="variable">sort2</span> <span class="operator">=</span> Sort.by(Sort.Direction.DESC, <span class="string">&quot;id&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 通过实例化 Sort.Order 来排序多个字段</span></span><br><span class="line">      List&lt;Sort.Order&gt; orders = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      Sort.<span class="type">Order</span> <span class="variable">order1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sort</span>.Order(Sort.Direction.DESC, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">      Sort.<span class="type">Order</span> <span class="variable">order2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sort</span>.Order(Sort.Direction.DESC, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">      orders.add(order1);</span><br><span class="line">      orders.add(order2);</span><br><span class="line">      <span class="type">Sort</span> <span class="variable">sort3</span> <span class="operator">=</span> Sort.by(orders);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//可以传不同的 sort1,2,3 去测试效果</span></span><br><span class="line">      <span class="keyword">return</span> teacherRepositoty.getTeachers(subject, sort1);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>Sort 是用来用来给字段排序的，可以根据一个字段进行排序，也可以给多个字段设置排序规则，但是个人之见使用Sort 对一个字段排序就好。</p>
<h5 id="jpa-的分页操作"><a href="#jpa-的分页操作" class="headerlink" title="jpa 的分页操作"></a>jpa 的分页操作</h5><p>数据多的时候就需要分页，spring data jpa 对分页提供了很好的支持，下面通过一个 demo 来展示如何使用分页：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TeacherRepositoty</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Teacher,Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常使用，只是多加了一个 Pageable 参数而已</span></span><br><span class="line">    <span class="meta">@Query(&quot;select t from Teacher t where t.subject = :subject&quot;)</span></span><br><span class="line">    Page&lt;Teacher&gt; <span class="title function_">getPage</span><span class="params">(<span class="meta">@Param(&quot;subject&quot;)</span> String subject, Pageable pageable)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照正常的查询步骤，多加一个 Pageable 的参数而已，如何获取 Pageable 呢？</p>
<p>Pageable 是一个接口类，它的实现类是 PageRequest ,下面就通过测试代码来研究一下如何来实例化 PageRequest:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;page/&#123;subject&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Page&lt;Teacher&gt; <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable(&quot;subject&quot;)</span> String subject)</span> &#123;</span><br><span class="line">    <span class="comment">// 第一种方法实例化 Pageable</span></span><br><span class="line">    <span class="type">Pageable</span> <span class="variable">pageable1</span> <span class="operator">=</span> PageRequest.of(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种实例化 Pageable</span></span><br><span class="line">    <span class="type">Sort</span> <span class="variable">sort</span> <span class="operator">=</span> Sort.by(Sort.Direction.ASC, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="type">Pageable</span> <span class="variable">pageable2</span> <span class="operator">=</span> PageRequest.of(<span class="number">1</span>, <span class="number">2</span>, sort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三种实例化 Pageable</span></span><br><span class="line">    <span class="type">Pageable</span> <span class="variable">pageable3</span> <span class="operator">=</span> PageRequest.of(<span class="number">1</span>, <span class="number">2</span>, Sort.Direction.DESC, <span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以传入不同的 Pageable,测试效果</span></span><br><span class="line">    <span class="type">Page</span> <span class="variable">page</span> <span class="operator">=</span> teacherRepositoty.getPage(subject, pageable3);</span><br><span class="line">    System.out.println(page.getTotalElements());</span><br><span class="line">    System.out.println(page.getTotalPages());</span><br><span class="line">    System.out.println(page.hasNext());</span><br><span class="line">    System.out.println(page.hasPrevious());</span><br><span class="line">    System.out.println(page.getNumberOfElements());</span><br><span class="line">    System.out.println(page.getSize());</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PageRequest 一共有三个可以实例化的静态方法：</p>
<ol>
<li><code>public static PageRequest of(int page, int size)</code></li>
<li><code>public static PageRequest of(int page, int size, Sort sort) </code>分页的同时还可以针对分页后的结果进行一个排序。</li>
<li><code>public static PageRequest of(int page, int size, Direction direction, String... properties) </code>直接针对字段进行排序。</li>
</ol>
<h5 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h5><p>暂无</p>
<h5 id="Projection-投影映射）"><a href="#Projection-投影映射）" class="headerlink" title="Projection (投影映射）"></a>Projection (投影映射）</h5><p>现在的需求是我只需要 Teacher 类对应的表 teacher 中的 name 和 age 的数据，其他数据不需要。 定义一个如下的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TeacherProjection</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Integer <span class="title function_">getAge</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;target.name +&#x27; and age is&#x27; + target.age&#125;&quot;)</span></span><br><span class="line">    String <span class="title function_">getTotal</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口中的方法以 get 开头 + 属性名，属性名首字母大写， 例如 getName(), 也可以通过 @Value 注解中使用 target.属性名获取属性，也可以把多个属性值拼接成一个字符串。</p>
<p>定义好一个接口后，在查询方法中指定返回接口类型的数据即可，参考代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TeacherRepositoty</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Teacher,Integer&gt;, JpaSpecificationExecutor &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 返回 TeacherProjection 接口类型的数据</span></span><br><span class="line">    <span class="meta">@Query(&quot;select t from Teacher t &quot;)</span></span><br><span class="line">    List&lt;TeacherProjection&gt; <span class="title function_">getTeacherNameAndAge</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/projection&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;TeacherProjection&gt; <span class="title function_">projection</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 返回指定字段的数据</span></span><br><span class="line">      List&lt;TeacherProjection&gt; projections = teacherRepositoty.getTeacherNameAndAge();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 打印字段值</span></span><br><span class="line">      projections.forEach(teacherProjection -&gt; &#123;</span><br><span class="line">          System.out.println(teacherProjection.getAge());</span><br><span class="line">          System.out.println(teacherProjection.getName());</span><br><span class="line">          System.out.println(teacherProjection.getTotal());</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> projections;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>运行测试，查看结果我们会发现，我们仅仅只是拿到 name 和 age 的字段值而已。</p>
<h4 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h4><h5 id="SINGLE-TABLE"><a href="#SINGLE-TABLE" class="headerlink" title="SINGLE_TABLE"></a>SINGLE_TABLE</h5><p>只生成父类一个表(复合父类和子类的字段)，子类相当于表中一条记录用dtype字段区分。用在比如key-value的形式。很多数据都是key-value形式，根据不同的类型代表不同的涵义。例如父表有字段id,key,value。子表1的DiscriminatorValue为color，key为red,value为FF0000。子表2的DiscriminatorValue为language,key为chinese,中文等。特征为不同类型子表的结构相同。</p>
<p>父类注解:<code>@Inheritance(strategy = InheritanceType.SINGLE_TABLE)</code>数据库表生成dtype字段。</p>
<p>子类继承父类使用注解<code>@DiscriminatorValue(&quot;a1&quot;)</code>指定表中dtype字段值。</p>
<h5 id="JOINED"><a href="#JOINED" class="headerlink" title="JOINED"></a>JOINED</h5><p>生成父类和子类所有的表，子表带有父类表的外键,也是子表的主键。插入记录时自动插入父表和子表数据。 父表和子表数据一对一(自动生成父表id时无法指定id，所以每次插入子表时会新建一条主表数据)。感觉只是把父表的字段放到子表中存储。</p>
<p>父类注解:<code>@Inheritance(strategy = InheritanceType.JOINED)</code></p>
<p>子类自动生成 子类名_id 的主键和外键(关联父类生成表的主键)</p>
<h5 id="TABLE-PER-CLASS"><a href="#TABLE-PER-CLASS" class="headerlink" title="TABLE_PER_CLASS"></a>TABLE_PER_CLASS</h5><p>父类注解：<code>@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)</code> 父类不生成表。主键生成策略不可以是<code>@GeneratedValue(strategy = GenerationType.IDENTITY)</code> ，我定义成了 <code>@GeneratedValue(strategy = GenerationType.AUTO) </code></p>
<p>只会生成子类对应的表。结构为父类+子类的字段。抽象出不同子类共同拥有的字段，id在父类设置。</p>
<p>另外父类可以使用<code>@MappedSuperclass</code>效果等同当前，只是父类不用写<code> @Entity</code>注解</p>
<h4 id="类与类关系常用注解"><a href="#类与类关系常用注解" class="headerlink" title="类与类关系常用注解"></a>类与类关系常用注解</h4><h5 id="JoinTable"><a href="#JoinTable" class="headerlink" title="@JoinTable"></a>@JoinTable</h5><p>用于生成一张关联外键表(自身表就不会产生外键字段)，name指定表名，表里分别有两个外键JoinColumn和inverseJoinColumns(name指定外键列名)。</p>
<p>如果不用<code>@JoinTable</code>就会在Student类自动生成一个computer_id的外键(多对一)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy= GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是定义学生和课桌的一对一的关系</span></span><br><span class="line">    <span class="meta">@OneToOne</span></span><br><span class="line"><span class="comment">// 下面的这个注解用来生成第三张表，来维护学生和课桌的关系</span></span><br><span class="line">    <span class="meta">@JoinTable( name = &quot;stu_desk&quot;,joinColumns = @JoinColumn(name=&quot;student_id&quot;),inverseJoinColumns = @JoinColumn(name=&quot;desk_id&quot;) )</span></span><br><span class="line">    <span class="keyword">private</span> Desk desk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne(mappedBy = &quot;computer&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单个变量用<code>@JoinTable</code>就是一对一关系。Set集合变量用<code>@JoinTable</code>就是多对多关系</p>
<h5 id="mappedBy"><a href="#mappedBy" class="headerlink" title="mappedBy"></a>mappedBy</h5><p>只有OneToOne,OneToMany,ManyToMany上才有mappedBy属性,若不设置，系统自动生成一个外键表做关联，ManyToOne不存在该属性；一般用在一的这一方。</p>
<p>使用mappedBy后，这个类生成的表将不会有这个字段的外键，外键应该在需要关联的表中使用<code>@JoinColumn</code>设置。例如<code>@OneToOne(mappedBy = &quot;computer&quot;)</code> mappedBy的值为设置外键那一方(Entity类)的变量名，而不是表中的字段名。</p>
<p>mappedBy跟JoinColumn&#x2F;JoinTable总是处于互斥的一方</p>
<h4 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h4><ol>
<li><p>CascadeType.PERSIST 该级联是级联保存。</p>
<p>​	级联保存记得在外键的一方设置外键</p>
</li>
<li><p>CascadeType.MERGE 该级联是级联更新</p>
</li>
<li><p>CascadeType.REMOVE 该级联是级联删除</p>
</li>
<li><p>CascadeType.REFRESH 该级联是级联刷新(不常用）</p>
</li>
<li><p>CascadeType.DETACH 该级联是级联托管（不常用）</p>
</li>
<li><p>CascadeType.ALL 具有上述五个级联的功能</p>
</li>
</ol>
<p>orphanRemoval 这个属性只存在两类关系注解中 <code>@OneToOne</code> 和<code> @OneToMany</code>中，为true有级联删除的效果。mappedBy这一方可以使用。(谨慎：例如删除一个学生级联删除教室，进一步导致教室内所有学生被删除)</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringdataJpa</tag>
      </tags>
  </entry>
  <entry>
    <title>网心云</title>
    <url>/%E5%B7%A5%E5%85%B7/wangxinyun/</url>
    <content><![CDATA[<p>安装网心云</p>
<span id="more"></span>

<p><a href="https://unixcop.com/how-to-create-a-virtual-hard-disk-in-ubuntu/">Linux创建虚拟硬盘</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看设备</span></span><br><span class="line">lsblk</span><br><span class="line"><span class="comment">#查看分区</span></span><br><span class="line"><span class="built_in">df</span> -lh</span><br><span class="line"></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/vda2 of=wxy.img bs=1M count=51200</span><br><span class="line"><span class="comment"># if=/dev/zero 初始化数据存储的输入文件</span></span><br><span class="line"><span class="comment"># of=wxy.img 要创建为存储卷的图像文件</span></span><br><span class="line"><span class="comment"># bs=1M 读/写 1mb 速度</span></span><br><span class="line"><span class="comment"># count=1200 51200 Mb 输入块的复制限制(50G)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#格式化</span></span><br><span class="line">mkfs -t ext4 wxy.img</span><br><span class="line"></span><br><span class="line"><span class="comment">#挂载</span></span><br><span class="line"><span class="built_in">mkdir</span> /mnt/wxy/</span><br><span class="line">mount -t auto -o loop /root/wxy.img /mnt/wxy/</span><br><span class="line"></span><br><span class="line"><span class="comment">#开机自动挂载</span></span><br><span class="line">nano /etc/fstab</span><br><span class="line"><span class="comment">#填入</span></span><br><span class="line">/root/wxy.img    /mnt/wxy/    ext4    defaults      0        0</span><br></pre></td></tr></table></figure>



<p>armbian自动挂载U盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自动挂载U盘</span></span><br><span class="line"><span class="comment">#用 fdisk -l 命令查看刚刚接入USB的U盘/硬盘并记下其设备名称</span></span><br><span class="line">blkid /dev/sda1</span><br><span class="line"><span class="comment">#记录uuid</span></span><br><span class="line"><span class="comment">#/dev/sda1: UUID=&quot;1c4dff5e-8d78-3c47-aeea-879e949222e9&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;08b76b0d-01&quot;</span></span><br><span class="line"><span class="comment">#创建要挂载到的目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /root/360u</span><br><span class="line"><span class="comment">#打开/etc/fstab文件，在最后行追加(记住是追加，原有的内容不要动)下面内容：</span></span><br><span class="line">nano /etc/fstab</span><br><span class="line">UUID=1c4dff5e-8d78-3c47-aeea-879e949222e9   /root/360u   ext4    defaults    0 0</span><br><span class="line"><span class="comment">#给目录权限</span></span><br><span class="line"><span class="built_in">chmod</span> -R 777 /root/360u</span><br><span class="line"><span class="comment">#重启，看/root/360u里是否有lost+found目录</span></span><br></pre></td></tr></table></figure>



<p><a href="https://help.onethingcloud.com/7cb4/3ed5/8907">容器魔方 树莓派安装激活教程</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--name=wxedge \</span><br><span class="line">--restart=always \</span><br><span class="line">--privileged \</span><br><span class="line">--net=host \</span><br><span class="line">--tmpfs /run \</span><br><span class="line">--tmpfs /tmp \</span><br><span class="line">-v /root/360u:/storage:rw \</span><br><span class="line">-d \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/onething/wxedge</span><br><span class="line"></span><br><span class="line"><span class="comment">#192.168.2.149:18888</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>网心云</tag>
      </tags>
  </entry>
  <entry>
    <title>WOW添加模型</title>
    <url>/%E6%B8%B8%E6%88%8F/wow-add-mount/</url>
    <content><![CDATA[<p>新建一个mpq文件 patch-zhCN-7.MPQ 选择兼容性</p>
<p>里面文件夹 Character  DBFilesClient  Interface</p>
<p>导入模型包到对应文件夹</p>
<span id="more"></span>

<h2 id="dbc修改"><a href="#dbc修改" class="headerlink" title="dbc修改"></a>dbc修改</h2><p>需要修改dbc文件 spell (技能)  SpellIcon(图标)		CreatureModelData	CreatureDisplayInfo</p>
<p>先修改spell</p>
<p>搜索飞毯或华丽的飞毯 虚空幼龙 28828，复制行，取一个最大的id    96000</p>
<p>然后修改生物模型CreatureModelData	dbc  ,随便复制一个 id 6000</p>
<p>第2列标识为2代表坐骑，第三列mpq文件内m2文件路径 Character\WhimsyshireCloudMount\WhimsyshireCloudMount.m2    保存</p>
<p>修改  CreatureDisplayInfo dbc   起到数据库和dbc相连作用. 随便找一行复制 id 50000 </p>
<p>第二列对应刚才CreatureModelData添加的id(6000)</p>
<p>第五列是模型尺寸倍数,7-9 把模型包mpq，里的blp文件名，不带后缀 WhimsyshireCloudMount_Angry</p>
<p>还需要新的贴图就新建一行，第二列id一样7-9填新的贴图名</p>
<p>保存</p>
<p>继续做技能spell</p>
<p>72为6 73为6 是陆地坐骑 74为6为飞行坐骑 (效果123)</p>
<p>效果基础值 81水 82陆&#x3D;309 83空&#x3D;99 速度</p>
<p>效果光环96 97 98列代表是否是飞行坐骑  78 32 0代表陆地坐骑  78 207 32 代表飞行坐骑</p>
<p>效果复合值 111列 填写数据库 entry 字段填写4000</p>
<p> creature_template 表 插入一行 entry字段填写4000,modelid1 字段 填写 CreatureDisplayInfo 的id  50000 , name字段 筋斗云</p>
<p>视觉效果 132列 ，根据AnimationData.dbc 中定义的来填写。  12884蹲伏的动作</p>
<p>修改 SpellIcon.dbc 复制一行 id 4376 第二列填写 Interface\Icons\INV_Mount_WhimsyshireCloudMount01</p>
<p>修改 spell里的技能图标134列为刚才的技能图标id</p>
<p>141列修改名字，</p>
<p>171还是175 修改描述</p>
<p>保存</p>
<p>把修改过的dbc添加到创建的mpq的 DBFilesClient 文件夹内</p>
<p>数据库 creature_model_info表 添加一条</p>
<p>modelid或者DisplayID为 CreatureDisplayInfo的id  50000，gender为2，应为坐骑没性别 </p>
<p>开启游戏，gm指令 .Learn id  学习法术</p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>WOW</tag>
      </tags>
  </entry>
  <entry>
    <title>WOW工具使用教程</title>
    <url>/%E6%B8%B8%E6%88%8F/wow-mod-tutorials/</url>
    <content><![CDATA[<p>这里以修改 wow3.3.5为例</p>
<span id="more"></span> 

<p>需要准备wow4.x-8.x的客户端，我用的是4.x的<br>使用M2ModRedux_8.2.3版本的m2转换器<br>blender脚本使用 blander_scipts_8.2.0版本<br>m2降级工具用 MultiConverter_3.1.1版本<br>模型预览工具我用的是WoWModelViewer7.x,高于7的不能预览wow3.x和wow4.x  (更高版本未测试)<br>blender使用2.8以前，我使用 blender-2.79b-windows64</p>
<p>步骤</p>
<p>用WoWModelViewer导出m2和skin文件 (从wow4.x以上版本导出)<br>M2ModRedux把m2文件转成m2i文件<br>blender导入m2i编辑模型，然后导出为m2i文件<br>M2ModRedux把刚才导出的m2i转成m2文件<br>用MultiConverter降级m2文件<br>用MPQmaster放到mpq文件内</p>
<p>链接<br><a href="https://bitbucket.org/%7Bdd60bb38-a5e5-4c9b-b635-64391cafe8cf%7D/">https://bitbucket.org/%7Bdd60bb38-a5e5-4c9b-b635-64391cafe8cf%7D/</a><br><a href="https://github.com/notagain/Tools">https://github.com/notagain/Tools</a><br><a href="http://www.zezula.net/en/mpq/main.html">http://www.zezula.net/en/mpq/main.html</a><br><a href="https://model-changing.net/files/">https://model-changing.net/files/</a><br><a href="https://model-changing.net/files/file/62-legion-wotlk-multi-converter/">https://model-changing.net/files/file/62-legion-wotlk-multi-converter/</a></p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>WOW</tag>
      </tags>
  </entry>
</search>
